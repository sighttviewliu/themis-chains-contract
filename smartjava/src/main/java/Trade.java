
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint80;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Trade extends Contract {
    private static final String BINARY = "608060405260056000806101000a81548160ff021916908360ff1602179055506000600660006101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614a848061008a6000396000f300608060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301fabd751461019b578063044f4a4e146101f657806308903cf8146102275780630a7db658146102985780630fc9afaf146103295780631821bb82146103825780632666b7671461041057806327acb4871461045d5780632dd5c746146104ae5780633f4ba83a14610517578063465be7831461052e5780635c975abb146105f05780636f9e0b401461061f578063715018a6146106735780638456cb591461068a5780638da5cb5b146106a1578063973ad270146106f857806398f3fafa146107535780639f6bd2a9146107b4578063ac364eae1461080f578063ad7ce55014610868578063bb133331146108c3578063ce36d79b1461091a578063dcaba7a31461097b578063dd080e87146109c8578063de757e9314610a10578063e941fa7814610a6b578063f2fde38b14610a9a578063f3241e9614610add578063facf2dd714610b2a578063fd748b9014610b8b578063ff06a28c14610c6d575b600080fd5b3480156101a757600080fd5b506101dc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cce565b604051808215151515815260200191505060405180910390f35b34801561020257600080fd5b5061020b610dd0565b604051808260ff1660ff16815260200191505060405180910390f35b34801561023357600080fd5b5061027e600480360381019080803569ffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610de2565b604051808215151515815260200191505060405180910390f35b3480156102a457600080fd5b5061030f600480360381019080803569ffffffffffffffffffff169060200190929190803590602001908201803590602001919091929391929390803563ffffffff169060200190929190803590602001908201803590602001919091929391929390505050610e65565b604051808215151515815260200191505060405180910390f35b34801561033557600080fd5b50610360600480360381019080803569ffffffffffffffffffff169060200190929190505050611530565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561038e57600080fd5b506103b9600480360381019080803569ffffffffffffffffffff16906020019092919050505061156c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103fc5780820151818401526020810190506103e1565b505050509050019250505060405180910390f35b34801561041c57600080fd5b50610447600480360381019080803569ffffffffffffffffffff169060200190929190505050611628565b6040518082815260200191505060405180910390f35b34801561046957600080fd5b50610494600480360381019080803569ffffffffffffffffffff169060200190929190505050611676565b604051808215151515815260200191505060405180910390f35b3480156104ba57600080fd5b506104fd600480360381019080803569ffffffffffffffffffff169060200190929190803515159060200190929190803515159060200190929190505050611970565b604051808215151515815260200191505060405180910390f35b34801561052357600080fd5b5061052c611de1565b005b34801561053a57600080fd5b50610575600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050611ea1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105b557808201518184015260208101905061059a565b50505050905090810190601f1680156105e25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156105fc57600080fd5b50610605611f8f565b604051808215151515815260200191505060405180910390f35b610659600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050611fa2565b604051808215151515815260200191505060405180910390f35b34801561067f57600080fd5b50610688612648565b005b34801561069657600080fd5b5061069f61274d565b005b3480156106ad57600080fd5b506106b661280e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070457600080fd5b50610739600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612834565b604051808215151515815260200191505060405180910390f35b34801561075f57600080fd5b5061079a600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff16906020019092919050505061292d565b604051808215151515815260200191505060405180910390f35b3480156107c057600080fd5b506107f5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d4a565b604051808215151515815260200191505060405180910390f35b34801561081b57600080fd5b50610846600480360381019080803569ffffffffffffffffffff169060200190929190505050612da7565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b34801561087457600080fd5b506108a9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612de3565b604051808215151515815260200191505060405180910390f35b3480156108cf57600080fd5b506108d8612f06565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561092657600080fd5b50610961600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050612f2c565b604051808215151515815260200191505060405180910390f35b34801561098757600080fd5b506109b2600480360381019080803569ffffffffffffffffffff1690602001909291905050506131c9565b6040518082815260200191505060405180910390f35b3480156109d457600080fd5b506109f6600480360381019080803560ff169060200190929190505050613217565b604051808215151515815260200191505060405180910390f35b348015610a1c57600080fd5b50610a47600480360381019080803569ffffffffffffffffffff169060200190929190505050613307565b60405180826006811115610a5757fe5b60ff16815260200191505060405180910390f35b348015610a7757600080fd5b50610a8061334c565b604051808215151515815260200191505060405180910390f35b348015610aa657600080fd5b50610adb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061349e565b005b348015610ae957600080fd5b50610b14600480360381019080803569ffffffffffffffffffff1690602001909291905050506135f6565b6040518082815260200191505060405180910390f35b348015610b3657600080fd5b50610b71600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050613788565b604051808215151515815260200191505060405180910390f35b348015610b9757600080fd5b50610bf2600480360381019080803569ffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050613a2a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c32578082015181840152602081019050610c17565b50505050905090810190601f168015610c5f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610cb4600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190803560ff169060200190929190505050613b59565b604051808215151515815260200191505060405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2c57600080fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f1cfba79c837dd282b5affd88ad85c693d8f3fc6abb9999b92849f776f499045b60405160405180910390a260019050919050565b6000809054906101000a900460ff1681565b6000600160008469ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610e6f61484c565b610e7761484c565b60606000600660009054906101000a900460ff16151515610e9757600080fd5b8a3373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f2057600080fd5b60026006811115610f2d57fe5b600160008e69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff166006811115610f7457fe5b141515610f8057600080fd5b8863ffffffff16600160008e69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff16148061102157508863ffffffff16600160008e69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16145b151561102c57600080fd5b61106a6040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250613f21565b94506110a78b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050613f21565b9350600160008d69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561115757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161110d575b50505050509250825160016111758787613f4f90919063ffffffff16565b0114151561118257600080fd5b600091505b82518260ff1610156113f0576111ae6111a98686613fc690919063ffffffff16565b613fe0565b600160008e69ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206005016000858560ff168151811015156111ef57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b63ffffffff1663ffffffff1681526020019081526020016000206000019080519060200190611266929190614866565b506000600160008e69ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206005016000858560ff168151811015156112aa57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b63ffffffff1663ffffffff16815260200190815260200160002060010160016101000a81548160ff0219169083151502179055506000600160008e69ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206005016000858560ff1681518110151561136857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b63ffffffff1663ffffffff16815260200190815260200160002060010160006101000a81548160ff0219169083151502179055508180600101925050611187565b60018060008e69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060020160008b63ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061145c8c614042565b508787600160008f69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160008c63ffffffff1663ffffffff16815260200190815260200160002091906114b79291906148e6565b508863ffffffff168c69ffffffffffffffffffff167f8a59d01dda427123e224b10a5103435e6a94ce386bd3d81052074263f9defce88d8d604051808060200182810382528484828181526020019250808284378201915050935050505060405180910390a36001955050505050509695505050505050565b6000600560008369ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff169050919050565b6060600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060030180548060200260200160405190810160405280929190818152602001828054801561161c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116115d2575b50505050509050919050565b6000600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff169050919050565b600080600080600660009054906101000a900460ff1615151561169857600080fd5b843373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561172157600080fd5b6004600681111561172e57fe5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff16600681111561177557fe5b14151561178157600080fd5b6006600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff021916908360068111156117cc57fe5b02179055506117da866135f6565b9350600092505b600160008769ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508360ff16101561192a57600160008769ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003018360ff1681548110151561185b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506118da84600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546141f290919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082806001019350506117e1565b8569ffffffffffffffffffff167f5c31eea1382076853b0d0e7c4e8c4d8601bb83e9c07aeb582ae9a1fcd2928ebb60405160405180910390a26001945050505050919050565b60008060008560011515600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515611a0157600080fd5b60036006811115611a0e57fe5b600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff166006811115611a5557fe5b141515611a6157600080fd5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff169250600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff16915085600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002060010160016101000a81548160ff02191690831515021790555060018060008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002060010160006101000a81548160ff02191690831515021790555084600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff16815260200190815260200160002060010160016101000a81548160ff02191690831515021790555060018060008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008463ffffffff1663ffffffff16815260200190815260200160002060010160006101000a81548160ff021916908315150217905550611d788761420e565b503373ffffffffffffffffffffffffffffffffffffffff167f0727453506ca45d3abe727861f7ec4de1b2032eec141005f8bb63e31024bc13287876040518083151515158152602001821515151581526020019250505060405180910390a25050509392505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e3d57600080fd5b600660009054906101000a900460ff161515611e5857600080fd5b6000600660006101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6060600160008469ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160008363ffffffff1663ffffffff1681526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f825780601f10611f5757610100808354040283529160200191611f82565b820191906000526020600020905b815481529060010190602001808311611f6557829003601f168201915b5050505050905092915050565b600660009054906101000a900460ff1681565b600060606000600660009054906101000a900460ff16151515611fc457600080fd5b843373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561204d57600080fd5b6000600681111561205a57fe5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff1660068111156120a157fe5b1415156120ad57600080fd5b6000341115156120bc57600080fd5b6000600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161415156121b5578463ffffffff16600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161415151561216357600080fd5b84600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055506122b4565b6000600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161415156122ae578463ffffffff16600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161415151561225c57600080fd5b84600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff1602179055506122b3565b600080fd5b5b6002600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff021916908360068111156122ff57fe5b0217905550600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d16ddf36000809054906101000a900460ff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff168152602001915050600060405180830381600087803b1580156123a657600080fd5b505af11580156123ba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156123e457600080fd5b8101908080516401000000008111156123fc57600080fd5b8281019050602081018481111561241257600080fd5b815185602082028301116401000000008211171561242f57600080fd5b505092919050505092506000809054906101000a900460ff1660ff16835114151561245957600080fd5b600091505b82518260ff1610156125145760018060008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206004016000858560ff168151811015156124ac57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550818060010192505061245e565b82600160008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003019080519060200190612556929190614966565b5034600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008763ffffffff1663ffffffff168152602001908152602001600020819055508463ffffffff168669ffffffffffffffffffff167fa6115165a89d929fa9c050d5546756b15c16b4cbf0ed66bd893c9209aff2db4485346040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b8381101561262757808201518184015260208101905061260c565b50505050905001935050505060405180910390a36001935050505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126a457600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127a957600080fd5b600660009054906101000a900460ff161515156127c557600080fd5b6001600660006101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561289257600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558173ffffffffffffffffffffffffffffffffffffffff167ff9f012dbf94ec6f26d3a73fbbae56a56fc7b236c4390d891201576ba3aaeb89160405160405180910390a260019050919050565b60008060008060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561299257600080fd5b6000600560008869ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16141515156129da57600080fd5b600560068111156129e757fe5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff166006811115612a2e57fe5b141515612a3a57600080fd5b600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff168563ffffffff161480612adb5750600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff168563ffffffff16145b1515612ae657600080fd5b84600560008869ffffffffffffffffffff16815260200190815260200160002060000160046101000a81548163ffffffff021916908363ffffffff1602179055506006600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff02191690836006811115612b7257fe5b0217905550612b80866135f6565b9250600091505b600160008769ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508260ff161015612cd057600160008769ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003018260ff16815481101515612c0157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612c8083600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546141f290919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508180600101925050612b87565b3373ffffffffffffffffffffffffffffffffffffffff168563ffffffff167f91cd4f1183722432c51b6df8de80eef3598ebc4ef71ce76150fd2c8e4ed9b09288604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390a36001935050505092915050565b600060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b6000600560008369ffffffffffffffffffff16815260200190815260200160002060000160049054906101000a900463ffffffff169050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e4157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612e7d57600080fd5b81600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f70a92b8c5bb39169e0a947c5d3a1fa4a03256fa46ed634a51a75ef801c4bd01c60405160405180910390a2919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900460ff16151515612f4a57600080fd5b823373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612fd357600080fd5b60006006811115612fe057fe5b600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff16600681111561302757fe5b14151561303357600080fd5b6000600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008563ffffffff1663ffffffff1681526020019081526020016000205411151561308d57600080fd5b60018060008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff021916908360068111156130d757fe5b02179055503373ffffffffffffffffffffffffffffffffffffffff166108fc600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008663ffffffff1663ffffffff168152602001908152602001600020549081150290604051600060405180830381858888f1935050505015801561316d573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff168469ffffffffffffffffffff167f6e2a76d5e51755e0d0ead9415eb85f81de3e3024755a804f28728cf4c42adb1d60405160405180910390a3600191505092915050565b6000600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff169050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561327557600080fd5b60038260ff161015151561328857600080fd5b600060028360ff1681151561329957fe5b0660ff16141515156132aa57600080fd5b816000806101000a81548160ff021916908360ff1602179055507f9b0b2211ad6eb917787b88e888ce2b894e4e4c5111f1347c1b857a76a1b634ea82604051808260ff16815260200191505060405180910390a160019050919050565b6000600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff169050919050565b600080600660009054906101000a900460ff1615151561336b57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156133bc57600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbcacd35e44ebcdaa615013d05335c060187b65a417e24f0714a9a6b629d64137826040518082815260200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613495573d6000803e3d6000fd5b50600191505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156134fa57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561353657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806000806000600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff169550600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff169450600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008763ffffffff1663ffffffff168152602001908152602001600020549350600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008663ffffffff1663ffffffff16815260200190815260200160002054925061373283856141f290919063ffffffff16565b9150613778600160008a69ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508361466790919063ffffffff16565b9050809650505050505050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156137e657600080fd5b6000600560008569ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff1614151561382d57600080fd5b8163ffffffff16600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff1614806138ce57508163ffffffff16600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16145b15156138d957600080fd5b600460068111156138e657fe5b600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160009054906101000a900460ff16600681111561392d57fe5b14151561393957600080fd5b6005600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff0219169083600681111561398457fe5b021790555081600560008569ffffffffffffffffffff16815260200190815260200160002060000160006101000a81548163ffffffff021916908363ffffffff1602179055508163ffffffff167f1091687dccfb26b1f39c83752f98f95d7220fd8aeedcc9cea7d8c312af711cc184604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390a26001905092915050565b6060600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613b4b5780601f10613b2057610100808354040283529160200191613b4b565b820191906000526020600020905b815481529060010190602001808311613b2e57829003601f168201915b505050505090509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515613bb757600080fd5b600660009054906101000a900460ff16151515613bd357600080fd5b8160006001811115613be157fe5b816001811115613bed57fe5b1480613c0e5750600180811115613c0057fe5b816001811115613c0c57fe5b145b1515613c1957600080fd5b6000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff16141515613c6c57600080fd5b6000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16141515613cbf57600080fd5b600034111515613cce57600080fd5b826001811115613cda57fe5b60006001811115613ce757fe5b1415613d3b5783600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff1602179055505b826001811115613d4757fe5b600180811115613d5357fe5b1415613da75783600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055505b33600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff02191690836006811115613e5f57fe5b021790555034600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008663ffffffff1663ffffffff168152602001908152602001600020819055508363ffffffff168569ffffffffffffffffffff167fe435d37c6b977d33a57d31d222155c537fde79601f1609f780be49c06d03c672853460405180836001811115613efb57fe5b60ff1681526020018281526020019250505060405180910390a360019150509392505050565b613f2961484c565b600060208301905060408051908101604052808451815260200182815250915050919050565b6000808260000151613f73856000015186602001518660000151876020015161467d565b0190505b836000015184602001510181111515613fbf5781806001019250508260000151613fb785602001518303866000015103838660000151876020015161467d565b019050613f77565b5092915050565b613fce61484c565b613fd9838383614763565b5092915050565b606080600083600001516040519080825280601f01601f19166020018201604052801561401c5781602001602082028038833980820191505090505b5091506020820190506140388185602001518660000151614801565b8192505050919050565b6000806000600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff169150600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff16905060011515600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060020160008463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff161515148015614191575060011515600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060020160008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff161515145b156141e7576003600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff021916908360068111156141e157fe5b02179055505b600192505050919050565b6000818301905082811015151561420557fe5b80905092915050565b6000806000806000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff169350600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff169250600091505b600160008769ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508260ff16101561460957600160008769ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003018260ff1681548110151561431757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060001515600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008663ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff16151514156143f2576000945061465e565b60001515600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008663ffffffff1663ffffffff16815260200190815260200160002060010160019054906101000a900460ff16151514156144a0576000945061465e565b60001515600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002060010160009054906101000a900460ff161515141561454e576000945061465e565b60001515600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008563ffffffff1663ffffffff16815260200190815260200160002060010160019054906101000a900460ff16151514156145fc576000945061465e565b818060010192505061429d565b6004600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060070160006101000a81548160ff0219169083600681111561465457fe5b0217905550600194505b50505050919050565b6000818381151561467457fe5b04905092915050565b60008060008060008060008060008b97508c8b11151561474d5760208b1115156147075760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b846000191683600019161415156146ff5783881015156146ec578c8c019850614753565b87806001019850508588511692506146c8565b879850614753565b8a8a209150600096505b8a8d038711151561474c578a8820905080600019168260001916141561473957879850614753565b6001880197508680600101975050614711565b5b8c8c0198505b5050505050505050949350505050565b61476b61484c565b6000614789856000015186602001518660000151876020015161467d565b905084602001518360200181815250508460200151810383600001818152505084600001518560200151018114156147cb5760008560000181815250506147f6565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b6020821015156148295782518452602084019350602083019250602082039150614804565b6001826020036101000a0390508019835116818551168181178652505050505050565b604080519081016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106148a757805160ff19168380011785556148d5565b828001600101855582156148d5579182015b828111156148d45782518255916020019190600101906148b9565b5b5090506148e291906149f0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061492757803560ff1916838001178555614955565b82800160010185558215614955579182015b82811115614954578235825591602001919060010190614939565b5b50905061496291906149f0565b5090565b8280548282559060005260206000209081019282156149df579160200282015b828111156149de5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190614986565b5b5090506149ec9190614a15565b5090565b614a1291905b80821115614a0e5760008160009055506001016149f6565b5090565b90565b614a5591905b80821115614a5157600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101614a1b565b5090565b905600a165627a7a723058200ec9c424015c8c0e5362c6699a84276d9545d2081dce2cfe37a89c502d4d35540029";

    private Trade(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Trade(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<LogCreateOrderEventResponse> getLogCreateOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogCreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogCreateOrderEventResponse> responses = new ArrayList<LogCreateOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogCreateOrderEventResponse typedResponse = new LogCreateOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogCreateOrderEventResponse> logCreateOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogCreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogCreateOrderEventResponse>() {
            @Override
            public LogCreateOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogCreateOrderEventResponse typedResponse = new LogCreateOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogCancelTradeEventResponse> getLogCancelTradeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogCancelTrade", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogCancelTradeEventResponse> responses = new ArrayList<LogCancelTradeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogCancelTradeEventResponse typedResponse = new LogCancelTradeEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogCancelTradeEventResponse> logCancelTradeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogCancelTrade", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogCancelTradeEventResponse>() {
            @Override
            public LogCancelTradeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogCancelTradeEventResponse typedResponse = new LogCancelTradeEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogConfirmTradeOrderEventResponse> getLogConfirmTradeOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogConfirmTradeOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogConfirmTradeOrderEventResponse> responses = new ArrayList<LogConfirmTradeOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogConfirmTradeOrderEventResponse typedResponse = new LogConfirmTradeOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.trustees = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogConfirmTradeOrderEventResponse> logConfirmTradeOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogConfirmTradeOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogConfirmTradeOrderEventResponse>() {
            @Override
            public LogConfirmTradeOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogConfirmTradeOrderEventResponse typedResponse = new LogConfirmTradeOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.trustees = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUploadSecretEventResponse> getLogUploadSecretEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUploadSecret", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUploadSecretEventResponse> responses = new ArrayList<LogUploadSecretEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUploadSecretEventResponse typedResponse = new LogUploadSecretEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.secrets = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUploadSecretEventResponse> logUploadSecretEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUploadSecret", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUploadSecretEventResponse>() {
            @Override
            public LogUploadSecretEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUploadSecretEventResponse typedResponse = new LogUploadSecretEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.secrets = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogVerifyResultEventResponse> getLogVerifyResultEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogVerifyResult", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogVerifyResultEventResponse> responses = new ArrayList<LogVerifyResultEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogVerifyResultEventResponse typedResponse = new LogVerifyResultEventResponse();
            typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buyerResult = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sellerResult = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogVerifyResultEventResponse> logVerifyResultEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogVerifyResult", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogVerifyResultEventResponse>() {
            @Override
            public LogVerifyResultEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogVerifyResultEventResponse typedResponse = new LogVerifyResultEventResponse();
                typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.buyerResult = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sellerResult = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogFinishOrderEventResponse> getLogFinishOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogFinishOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogFinishOrderEventResponse> responses = new ArrayList<LogFinishOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogFinishOrderEventResponse typedResponse = new LogFinishOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogFinishOrderEventResponse> logFinishOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogFinishOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogFinishOrderEventResponse>() {
            @Override
            public LogFinishOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogFinishOrderEventResponse typedResponse = new LogFinishOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogWithdrawFeeEventResponse> getLogWithdrawFeeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogWithdrawFee", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogWithdrawFeeEventResponse> responses = new ArrayList<LogWithdrawFeeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogWithdrawFeeEventResponse typedResponse = new LogWithdrawFeeEventResponse();
            typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogWithdrawFeeEventResponse> logWithdrawFeeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogWithdrawFee", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogWithdrawFeeEventResponse>() {
            @Override
            public LogWithdrawFeeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogWithdrawFeeEventResponse typedResponse = new LogWithdrawFeeEventResponse();
                typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Pause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PauseEventResponse> pauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Pause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Unpause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Unpause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<ArbitrateEventResponse> getArbitrateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Arbitrate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ArbitrateEventResponse> responses = new ArrayList<ArbitrateEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ArbitrateEventResponse typedResponse = new ArbitrateEventResponse();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ArbitrateEventResponse> arbitrateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Arbitrate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ArbitrateEventResponse>() {
            @Override
            public ArbitrateEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ArbitrateEventResponse typedResponse = new ArbitrateEventResponse();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<JudgeEventResponse> getJudgeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Judge", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<JudgeEventResponse> responses = new ArrayList<JudgeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            JudgeEventResponse typedResponse = new JudgeEventResponse();
            typedResponse.winner = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.judge = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<JudgeEventResponse> judgeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Judge", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, JudgeEventResponse>() {
            @Override
            public JudgeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                JudgeEventResponse typedResponse = new JudgeEventResponse();
                typedResponse.winner = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.judge = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddArbitratorEventResponse> getAddArbitratorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddArbitratorEventResponse> responses = new ArrayList<AddArbitratorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddArbitratorEventResponse typedResponse = new AddArbitratorEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddArbitratorEventResponse> addArbitratorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddArbitratorEventResponse>() {
            @Override
            public AddArbitratorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddArbitratorEventResponse typedResponse = new AddArbitratorEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveArbitratorEventResponse> getRemoveArbitratorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveArbitratorEventResponse> responses = new ArrayList<RemoveArbitratorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveArbitratorEventResponse typedResponse = new RemoveArbitratorEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveArbitratorEventResponse> removeArbitratorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveArbitratorEventResponse>() {
            @Override
            public RemoveArbitratorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveArbitratorEventResponse typedResponse = new RemoveArbitratorEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUpdateDefaultTrusteeNumberEventResponse> getLogUpdateDefaultTrusteeNumberEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUpdateDefaultTrusteeNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUpdateDefaultTrusteeNumberEventResponse> responses = new ArrayList<LogUpdateDefaultTrusteeNumberEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUpdateDefaultTrusteeNumberEventResponse typedResponse = new LogUpdateDefaultTrusteeNumberEventResponse();
            typedResponse.newNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUpdateDefaultTrusteeNumberEventResponse> logUpdateDefaultTrusteeNumberEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUpdateDefaultTrusteeNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUpdateDefaultTrusteeNumberEventResponse>() {
            @Override
            public LogUpdateDefaultTrusteeNumberEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUpdateDefaultTrusteeNumberEventResponse typedResponse = new LogUpdateDefaultTrusteeNumberEventResponse();
                typedResponse.newNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUpdateTrusteeContractEventResponse> getLogUpdateTrusteeContractEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUpdateTrusteeContract", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUpdateTrusteeContractEventResponse> responses = new ArrayList<LogUpdateTrusteeContractEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUpdateTrusteeContractEventResponse typedResponse = new LogUpdateTrusteeContractEventResponse();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUpdateTrusteeContractEventResponse> logUpdateTrusteeContractEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUpdateTrusteeContract", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUpdateTrusteeContractEventResponse>() {
            @Override
            public LogUpdateTrusteeContractEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUpdateTrusteeContractEventResponse typedResponse = new LogUpdateTrusteeContractEventResponse();
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> addArbitrator(String who) {
        Function function = new Function(
                "addArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> trusteeNumber() {
        Function function = new Function("trusteeNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isOrderTrustee(BigInteger orderID, String user) {
        Function function = new Function("isOrderTrustee", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> uploadSecret(BigInteger orderID, String secrets, BigInteger userID, String verifyData) {
        Function function = new Function(
                "uploadSecret", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Utf8String(secrets), 
                new org.web3j.abi.datatypes.generated.Uint32(userID), 
                new org.web3j.abi.datatypes.Utf8String(verifyData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getRequester(BigInteger orderID) {
        Function function = new Function("getRequester", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List<String>> getOrderTrustees(BigInteger orderID) {
        Function function = new Function("getOrderTrustees", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List<String>.class);
    }

    public RemoteCall<BigInteger> getOrderBuyer(BigInteger orderID) {
        Function function = new Function("getOrderBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> finishOrder(BigInteger orderID) {
        Function function = new Function(
                "finishOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> sendVerifyResult(BigInteger orderID, Boolean buyerResult, Boolean sellerResult) {
        Function function = new Function(
                "sendVerifyResult", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Bool(buyerResult), 
                new org.web3j.abi.datatypes.Bool(sellerResult)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        Function function = new Function(
                "unpause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getVerifyData(BigInteger orderID, BigInteger user) {
        Function function = new Function("getVerifyData", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> paused() {
        Function function = new Function("paused", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> confirmTradeOrder(BigInteger orderID, BigInteger userID, BigInteger weiValue) {
        Function function = new Function(
                "confirmTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause() {
        Function function = new Function(
                "pause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeArbitrator(String who) {
        Function function = new Function(
                "removeArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> judge(BigInteger orderID, BigInteger winner) {
        Function function = new Function(
                "judge", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(winner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isArbitrator(String who) {
        Function function = new Function("isArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getWinner(BigInteger orderID) {
        Function function = new Function("getWinner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateTrusteeContract(String _trustee) {
        Function function = new Function(
                "updateTrusteeContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trusteeContract() {
        Function function = new Function("trusteeContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> cancelTrade(BigInteger orderID, BigInteger createUserID) {
        Function function = new Function(
                "cancelTrade", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(createUserID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOrderSeller(BigInteger orderID) {
        Function function = new Function("getOrderSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateDefaultTrusteeNumber(BigInteger _trusteeNumber) {
        Function function = new Function(
                "updateDefaultTrusteeNumber", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_trusteeNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOrderStatus(BigInteger orderID) {
        Function function = new Function("getOrderStatus", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> withdrawFee() {
        Function function = new Function(
                "withdrawFee", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getPerFeeOfOrder(BigInteger orderID) {
        Function function = new Function("getPerFeeOfOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> arbitrate(BigInteger orderID, BigInteger user) {
        Function function = new Function(
                "arbitrate", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getSecret(BigInteger orderID, String trusteeID, BigInteger user) {
        Function function = new Function("getSecret", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Address(trusteeID), 
                new org.web3j.abi.datatypes.generated.Uint32(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createNewTradeOrder(BigInteger orderID, BigInteger userID, BigInteger userType, BigInteger weiValue) {
        Function function = new Function(
                "createNewTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(userID), 
                new org.web3j.abi.datatypes.generated.Uint8(userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Trade load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Trade load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class LogCreateOrderEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public BigInteger userType;

        public BigInteger feePayed;
    }

    public static class LogCancelTradeEventResponse {
        public BigInteger orderID;

        public String creator;
    }

    public static class LogConfirmTradeOrderEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public List<String> trustees;

        public BigInteger feePayed;
    }

    public static class LogUploadSecretEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public String secrets;
    }

    public static class LogVerifyResultEventResponse {
        public String trustee;

        public Boolean buyerResult;

        public Boolean sellerResult;
    }

    public static class LogFinishOrderEventResponse {
        public BigInteger orderID;
    }

    public static class LogWithdrawFeeEventResponse {
        public String trustee;

        public BigInteger amount;
    }

    public static class PauseEventResponse {
    }

    public static class UnpauseEventResponse {
    }

    public static class ArbitrateEventResponse {
        public BigInteger user;

        public BigInteger orderID;
    }

    public static class JudgeEventResponse {
        public BigInteger winner;

        public String judge;

        public BigInteger orderID;
    }

    public static class AddArbitratorEventResponse {
        public String who;
    }

    public static class RemoveArbitratorEventResponse {
        public String who;
    }

    public static class LogUpdateDefaultTrusteeNumberEventResponse {
        public BigInteger newNumber;
    }

    public static class LogUpdateTrusteeContractEventResponse {
        public String newAddress;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
