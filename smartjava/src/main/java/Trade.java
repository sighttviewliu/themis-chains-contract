package o;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Trade extends Contract {
    private static final String BINARY = "6080604052600b60015534801561001557600080fd5b50604051604080620039118339810180604052810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156100bf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100fb57600080fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050613782806200018f6000396000f300608060405260043610610128576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630a157e021461012d57806318b28435146101845780631c17b9b2146101c957806334a733ec146102475780633c8047a11461030d5780633e4b1302146103d35780635bf608b8146104515780636da647e4146104be578063715018a61461058457806379f25afa1461059b5780638da5cb5b14610661578063add2f133146106b8578063bc5cdb2914610743578063c6af3400146107a5578063d0fb020314610827578063d2cfe6711461087e578063d6a9de51146108a9578063daa674b114610916578063e370e0ac1461095b578063f2fde38b146109e6578063f52706a014610a29578063f6f6648314610a84575b600080fd5b34801561013957600080fd5b50610142610adb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019057600080fd5b506101af60048036038101908080359060200190929190505050610b01565b604051808215151515815260200191505060405180910390f35b61022d60048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610bd0565b604051808215151515815260200191505060405180910390f35b34801561025357600080fd5b5061029260048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f20565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d25780820151818401526020810190506102b7565b50505050905090810190601f1680156102ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031957600080fd5b5061035860048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fa8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561039857808201518184015260208101905061037d565b50505050905090810190601f1680156103c55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61043760048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610fbe565b604051808215151515815260200191505060405180910390f35b34801561045d57600080fd5b5061047c6004803603810190808035906020019092919050505061130e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104ca57600080fd5b5061050960048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061134e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054957808201518184015260208101905061052e565b50505050905090810190601f1680156105765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561059057600080fd5b506105996113d6565b005b3480156105a757600080fd5b506105e660048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114d8565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561062657808201518184015260208101905061060b565b50505050905090810190601f1680156106535780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561066d57600080fd5b506106766114ee565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106c457600080fd5b5061072960048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611513565b604051808215151515815260200191505060405180910390f35b61078b60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611668565b604051808215151515815260200191505060405180910390f35b3480156107b157600080fd5b506107d06004803603810190808035906020019092919050505061229d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108135780820151818401526020810190506107f8565b505050509050019250505060405180910390f35b34801561083357600080fd5b5061083c612341565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561088a57600080fd5b50610893612367565b6040518082815260200191505060405180910390f35b3480156108b557600080fd5b506108d46004803603810190808035906020019092919050505061236d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561092257600080fd5b50610941600480360381019080803590602001909291905050506123ad565b604051808215151515815260200191505060405180910390f35b34801561096757600080fd5b506109cc60048036038101908080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061242a565b604051808215151515815260200191505060405180910390f35b3480156109f257600080fd5b50610a27600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061257f565b005b348015610a3557600080fd5b50610a6a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506126d4565b604051808215151515815260200191505060405180910390f35b348015610a9057600080fd5b50610a996127b7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000809150600090505b6005600085815260200190815260200160002060020180549050811015610bc6573373ffffffffffffffffffffffffffffffffffffffff166005600086815260200190815260200160002060020182815481101515610b6957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610bb95760019150610bc6565b8080600101915050610b0e565b8192505050919050565b60006060836005600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c4557600080fd5b60056000868152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015610cdb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c91575b50505050509150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d5125f83487600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b6a1d036040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610da857600080fd5b505af1158015610dbc573d6000803e3d6000fd5b505050506040513d6020811015610dd257600080fd5b810190808051906020019092919050505033876040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001846001811115610e2657fe5b60ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610e9f578082015181840152602081019050610e84565b50505050905001955050505050506020604051808303818588803b158015610ec657600080fd5b505af1158015610eda573d6000803e3d6000fd5b50505050506040513d6020811015610ef157600080fd5b81019080805190602001909291905050501515610f0a57fe5b610f16856000866127dd565b9250505092915050565b6060826005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610f9357600080fd5b610f9f84600185612ac2565b91505092915050565b6060610fb683600184612bd8565b905092915050565b60006060836005600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561103357600080fd5b600560008681526020019081526020016000206002018054806020026020016040519081016040528092919081815260200182805480156110c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161107f575b50505050509150600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d5125f83487600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635b6a1d036040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561119657600080fd5b505af11580156111aa573d6000803e3d6000fd5b505050506040513d60208110156111c057600080fd5b810190808051906020019092919050505033876040518663ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018085815260200184600181111561121457fe5b60ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561128d578082015181840152602081019050611272565b50505050905001955050505050506020604051808303818588803b1580156112b457600080fd5b505af11580156112c8573d6000803e3d6000fd5b50505050506040513d60208110156112df57600080fd5b810190808051906020019092919050505015156112f857fe5b611304856001866127dd565b9250505092915050565b60006005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060826005600082815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113c157600080fd5b6113cd84600085612ac2565b91505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561143157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606114e683600084612bd8565b905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008261151f81610b01565b151561152a57600080fd5b61164561164060056000878152602001908152602001600020600401600080600181111561155457fe5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116365780601f1061160b57610100808354040283529160200191611636565b820191906000526020600020905b81548152906001019060200180831161161957829003601f168201915b5050505050612cee565b612d1c565b151561165057600080fd5b61165c84600185612d2c565b50600191505092915050565b6000606080600073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156116cb57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663665ae96f336040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561178857600080fd5b505af115801561179c573d6000803e3d6000fd5b505050506040513d60208110156117b257600080fd5b810190808051906020019092919050505015156117ce57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561183f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156118b057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156118ec57600080fd5b60006002858115156118fa57fe5b061415151561190857600080fd5b600154841115151561191957600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663665ae96f866040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505050506040513d6020811015611a0057600080fd5b81019080805190602001909291905050501515611a1c57600080fd5b846005600088815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336005600088815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631daf5d9b856040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611b5757600080fd5b505af1158015611b6b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611b9557600080fd5b810190808051640100000000811115611bad57600080fd5b82810190506020810184811115611bc357600080fd5b8151856020820283011164010000000082111715611be057600080fd5b505092919050505091506003825110151515611bfb57600080fd5b60008251118015611c195750600060028351811515611c1657fe5b06145b15611f6357611c2c82600184510361323a565b905080600560008881526020019081526020016000206002019080519060200190611c589291906135ca565b50600160028251811515611c6857fe5b04016005600088815260200190815260200160002060080181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d5125f83488600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcf0cc4a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015611d4a57600080fd5b505af1158015611d5e573d6000803e3d6000fd5b505050506040513d6020811015611d7457600080fd5b810190808051906020019092919050505033866040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180858152602001846001811115611dc857fe5b60ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611e41578082015181840152602081019050611e26565b50505050905001955050505050506020604051808303818588803b158015611e6857600080fd5b505af1158015611e7c573d6000803e3d6000fd5b50505050506040513d6020811015611e9357600080fd5b81019080805190602001909291905050501515611eac57fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcfc45bb8f7b7e40d083374fa1c4b4848e9df33830a2a6b9301493647bb9d1f2488846040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611f46578082015181840152602081019050611f2b565b50505050905001935050505060405180910390a360019250612294565b81600560008881526020019081526020016000206002019080519060200190611f8d9291906135ca565b50600160028351811515611f9d57fe5b04016005600088815260200190815260200160002060080181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d5125f83488600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bcf0cc4a6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561207f57600080fd5b505af1158015612093573d6000803e3d6000fd5b505050506040513d60208110156120a957600080fd5b810190808051906020019092919050505033876040518663ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808581526020018460018111156120fd57fe5b60ff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561217657808201518184015260208101905061215b565b50505050905001955050505050506020604051808303818588803b15801561219d57600080fd5b505af11580156121b1573d6000803e3d6000fd5b50505050506040513d60208110156121c857600080fd5b810190808051906020019092919050505015156121e157fe5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcfc45bb8f7b7e40d083374fa1c4b4848e9df33830a2a6b9301493647bb9d1f2488856040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561227b578082015181840152602081019050612260565b50505050905001935050505060405180910390a3600192505b50509392505050565b60606005600083815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561233557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116122eb575b50505050509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60006005600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561240a57600080fd5b6003821015151561241a57600080fd5b8160018190555060019050919050565b60008261243681610b01565b151561244157600080fd5b61255c61255760056000878152602001908152602001600020600401600060018081111561246b57fe5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561254d5780601f106125225761010080835404028352916020019161254d565b820191906000526020600020905b81548152906001019060200180831161253057829003601f168201915b5050505050612cee565b612d1c565b151561256757600080fd5b61257384600085612d2c565b50600191505092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156125da57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561261657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561273157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561276d57600080fd5b81600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006127e7613654565b6127ef613654565b6000606060008060606128366040805190810160405280600181526020017f2c00000000000000000000000000000000000000000000000000000000000000815250612cee565b965061284189612cee565b95506001612858888861330890919063ffffffff16565b019450600560008c81526020019081526020016000206002018054806020026020016040519081016040528092919081815260200182805480156128f157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116128a7575b5050505050935083518514151561290757600080fd5b89600181111561291357fe5b9250600091505b848210156129df5761293d612938888861337f90919063ffffffff16565b613399565b905080600560008d81526020019081526020016000206003016000868581518110151561296657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060000190805190602001906129d192919061366e565b50818060010192505061291a565b3373ffffffffffffffffffffffffffffffffffffffff167f4491fee63e1b2614fdd79a3cb9ab4eaf6cf253b366ee5df2f03adabbcc54c85c8c8c8c60405180848152602001836001811115612a3057fe5b60ff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612a74578082015181840152602081019050612a59565b50505050905090810190601f168015612aa15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a260019750505050505050509392505050565b6060600560008581526020019081526020016000206004016000846001811115612ae857fe5b815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bca5780601f10612b9f57610100808354040283529160200191612bca565b820191906000526020600020905b815481529060010190602001808311612bad57829003601f168201915b505050505090509392505050565b60606005600085815260200190815260200160002060030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000846001811115612c3b57fe5b81526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ce05780601f10612cb557610100808354040283529160200191612ce0565b820191906000526020600020905b815481529060010190602001808311612cc357829003601f168201915b505050505090509392505050565b612cf6613654565b600060208301905060408051908101604052808451815260200182815250915050919050565b6000808260000151149050919050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e5f50f00846040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612dd9578082015181840152602081019050612dbe565b50505050905090810190601f168015612e065780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015612e2557600080fd5b505af1158015612e39573d6000803e3d6000fd5b505050506040513d6020811015612e4f57600080fd5b81019080805190602001909291905050501515612e6b57600080fd5b836001811115612e7757fe5b9050612f89612f8460056000888152602001908152602001600020600401600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612f7a5780601f10612f4f57610100808354040283529160200191612f7a565b820191906000526020600020905b815481529060010190602001808311612f5d57829003601f168201915b5050505050612cee565b612d1c565b15612fe55760016005600087815260200190815260200160002060050160008381526020019081526020016000205401600560008781526020019081526020016000206005016000838152602001908152602001600020819055505b8260056000878152602001908152602001600020600401600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001908051906020019061306092919061366e565b5060056000868152602001908152602001600020600801546005600087815260200190815260200160002060050160008381526020019081526020016000205410151561315d57600060018111156130b457fe5b8460018111156130c057fe5b14156131025760026005600087815260200190815260200160002060060160010160006101000a81548160ff021916908360028111156130fc57fe5b02179055505b60018081111561310e57fe5b84600181111561311a57fe5b141561315c5760016005600087815260200190815260200160002060060160010160006101000a81548160ff0219169083600281111561315657fe5b02179055505b5b3373ffffffffffffffffffffffffffffffffffffffff167f24538d8d2b02982080c2a529355335e2ed33e94f5f6f2e9a6be5e54a64af2d8d868686604051808481526020018360018111156131ae57fe5b60ff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156131f25780820151818401526020810190506131d7565b50505050905090810190601f16801561321f5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a260019150509392505050565b60608060008451841115151561324f57600080fd5b8360405190808252806020026020018201604052801561327e5781602001602082028038833980820191505090505b509150600090505b838110156132fd57848181518110151561329c57fe5b9060200190602002015182828151811015156132b457fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050613286565b819250505092915050565b600080826000015161332c85600001518660200151866000015187602001516133fb565b0190505b83600001518460200151018111151561337857818060010192505082600001516133708560200151830386600001510383866000015187602001516133fb565b019050613330565b5092915050565b613387613654565b6133928383836134e1565b5092915050565b606080600083600001516040519080825280601f01601f1916602001820160405280156133d55781602001602082028038833980820191505090505b5091506020820190506133f1818560200151866000015161357f565b8192505050919050565b60008060008060008060008060008b97508c8b1115156134cb5760208b1115156134855760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b8460001916836000191614151561347d57838810151561346a578c8c0198506134d1565b8780600101985050858851169250613446565b8798506134d1565b8a8a209150600096505b8a8d03871115156134ca578a882090508060001916826000191614156134b7578798506134d1565b600188019750868060010197505061348f565b5b8c8c0198505b5050505050505050949350505050565b6134e9613654565b600061350785600001518660200151866000015187602001516133fb565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415613549576000856000018181525050613574565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b6020821015156135a75782518452602084019350602083019250602082039150613582565b6001826020036101000a0390508019835116818551168181178652505050505050565b828054828255906000526020600020908101928215613643579160200282015b828111156136425782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906135ea565b5b50905061365091906136ee565b5090565b604080519081016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106136af57805160ff19168380011785556136dd565b828001600101855582156136dd579182015b828111156136dc5782518255916020019190600101906136c1565b5b5090506136ea9190613731565b5090565b61372e91905b8082111561372a57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055506001016136f4565b5090565b90565b61375391905b8082111561374f576000816000905550600101613737565b5090565b905600a165627a7a72305820e333ca2b40f9db8d1d7069806b2defd7f5de7c0d128cc3442619729b0c7c9ebd0029";

    private Trade(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Trade(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<CreateOrderEventResponse> getCreateOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateOrderEventResponse> responses = new ArrayList<CreateOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateOrderEventResponse typedResponse = new CreateOrderEventResponse();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateOrderEventResponse> createOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateOrderEventResponse>() {
            @Override
            public CreateOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateOrderEventResponse typedResponse = new CreateOrderEventResponse();
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<UploadEncryptedShardEventResponse> getUploadEncryptedShardEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UploadEncryptedShard", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UploadEncryptedShardEventResponse> responses = new ArrayList<UploadEncryptedShardEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UploadEncryptedShardEventResponse typedResponse = new UploadEncryptedShardEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.shards = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UploadEncryptedShardEventResponse> uploadEncryptedShardEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UploadEncryptedShard", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UploadEncryptedShardEventResponse>() {
            @Override
            public UploadEncryptedShardEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UploadEncryptedShardEventResponse typedResponse = new UploadEncryptedShardEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.shards = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RecoverPrivKeyEventResponse> getRecoverPrivKeyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RecoverPrivKey", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RecoverPrivKeyEventResponse> responses = new ArrayList<RecoverPrivKeyEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RecoverPrivKeyEventResponse typedResponse = new RecoverPrivKeyEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.privKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RecoverPrivKeyEventResponse> recoverPrivKeyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RecoverPrivKey", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RecoverPrivKeyEventResponse>() {
            @Override
            public RecoverPrivKeyEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RecoverPrivKeyEventResponse typedResponse = new RecoverPrivKeyEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.privKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<UploadDecryptedShardsEventResponse> getUploadDecryptedShardsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UploadDecryptedShards", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UploadDecryptedShardsEventResponse> responses = new ArrayList<UploadDecryptedShardsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UploadDecryptedShardsEventResponse typedResponse = new UploadDecryptedShardsEventResponse();
            typedResponse.hoster = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.decryptedShard = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UploadDecryptedShardsEventResponse> uploadDecryptedShardsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UploadDecryptedShards", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UploadDecryptedShardsEventResponse>() {
            @Override
            public UploadDecryptedShardsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UploadDecryptedShardsEventResponse typedResponse = new UploadDecryptedShardsEventResponse();
                typedResponse.hoster = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.decryptedShard = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> vss() {
        Function function = new Function("vss", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isUserHoster(BigInteger _orderID) {
        Function function = new Function("isUserHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> uploadBuyerShardFromSeller(BigInteger _orderID, String _shard, BigInteger weiValue) {
        Function function = new Function(
                "uploadBuyerShardFromSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_shard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> getSellerDecryptedShard(BigInteger _orderID, String _hoster) {
        Function function = new Function("getSellerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hoster)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getSellerShardByHosterID(BigInteger _orderID, String _hosterID) {
        Function function = new Function("getSellerShardByHosterID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hosterID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> uploadSellerShardFromBuyer(BigInteger _orderID, String _shard, BigInteger weiValue) {
        Function function = new Function(
                "uploadSellerShardFromBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_shard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> getBuyer(BigInteger _orderID) {
        Function function = new Function("getBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getBuyerDecryptedShard(BigInteger _orderID, String _hoster) {
        Function function = new Function("getBuyerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hoster)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getBuyerShardByHosterID(BigInteger _orderID, String _hosterID) {
        Function function = new Function("getBuyerShardByHosterID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hosterID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> uploadSellerDecryptedShard(BigInteger _orderID, String _decryptedShard) {
        Function function = new Function(
                "uploadSellerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_decryptedShard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createNewTradeOrder(BigInteger _orderID, String _seller, BigInteger _hosterNum, BigInteger weiValue) {
        Function function = new Function(
                "createNewTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_hosterNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<List<String>> getShardHosters(BigInteger _orderID) {
        Function function = new Function("getShardHosters", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List<String>.class);
    }

    public RemoteCall<String> feeManager() {
        Function function = new Function("feeManager", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> maxHosterNum() {
        Function function = new Function("maxHosterNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getSeller(BigInteger _orderID) {
        Function function = new Function("getSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateMaxHosterNum(BigInteger _maxHosterNum) {
        Function function = new Function(
                "updateMaxHosterNum", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_maxHosterNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> uploadBuyerDecryptedShard(BigInteger _orderID, String _decryptedShard) {
        Function function = new Function(
                "uploadBuyerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_decryptedShard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateHosterContract(String _hoster) {
        Function function = new Function(
                "updateHosterContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_hoster)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> hosterContract() {
        Function function = new Function("hosterContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _feeManager, String _vss) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManager), 
                new org.web3j.abi.datatypes.Address(_vss)));
        return deployRemoteCall(Trade.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _feeManager, String _vss) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManager), 
                new org.web3j.abi.datatypes.Address(_vss)));
        return deployRemoteCall(Trade.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static Trade load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Trade load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class CreateOrderEventResponse {
        public String buyer;

        public String seller;

        public BigInteger orderID;

        public List<String> hosters;
    }

    public static class UploadEncryptedShardEventResponse {
        public String who;

        public BigInteger orderID;

        public BigInteger userType;

        public String shards;
    }

    public static class RecoverPrivKeyEventResponse {
        public BigInteger orderID;

        public BigInteger userType;

        public String privKey;
    }

    public static class UploadDecryptedShardsEventResponse {
        public String hoster;

        public BigInteger orderID;

        public BigInteger userType;

        public String decryptedShard;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
