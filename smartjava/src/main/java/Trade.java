
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint80;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Trade extends Contract {
    private static final String BINARY = "608060405260056000806101000a81548160ff021916908360ff1602179055506000600660006101000a81548160ff02191690831515021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613be48061008a6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301fabd751461017a578063044f4a4e146101d557806308903cf8146102065780630fc9afaf146102775780631821bb82146102c45780632666b7671461035257806326916a151461039f57806327acb487146104465780633f4ba83a146104975780635c975abb146104ae5780636f9e0b40146104dd578063715018a6146105315780638456cb59146105485780638da5cb5b1461055f578063973ad270146105b657806398f3fafa146106115780639f6bd2a914610672578063ac364eae146106cd578063ad7ce5501461071a578063bb13333114610775578063ce36d79b146107cc578063dcaba7a31461082d578063dd080e871461087a578063e941fa78146108c2578063f2fde38b146108f1578063f3241e9614610934578063facf2dd714610981578063fd748b90146109e2578063ff06a28c14610ac4575b600080fd5b34801561018657600080fd5b506101bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b25565b604051808215151515815260200191505060405180910390f35b3480156101e157600080fd5b506101ea610c27565b604051808260ff1660ff16815260200191505060405180910390f35b34801561021257600080fd5b5061025d600480360381019080803569ffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c39565b604051808215151515815260200191505060405180910390f35b34801561028357600080fd5b506102ae600480360381019080803569ffffffffffffffffffff169060200190929190505050610cbc565b6040518082815260200191505060405180910390f35b3480156102d057600080fd5b506102fb600480360381019080803569ffffffffffffffffffff169060200190929190505050610ce8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561033e578082015181840152602081019050610323565b505050509050019250505060405180910390f35b34801561035e57600080fd5b50610389600480360381019080803569ffffffffffffffffffff169060200190929190505050610da4565b6040518082815260200191505060405180910390f35b3480156103ab57600080fd5b5061042c600480360381019080803569ffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803563ffffffff169060200190929190505050610df2565b604051808215151515815260200191505060405180910390f35b34801561045257600080fd5b5061047d600480360381019080803569ffffffffffffffffffff169060200190929190505050611307565b604051808215151515815260200191505060405180910390f35b3480156104a357600080fd5b506104ac611601565b005b3480156104ba57600080fd5b506104c36116c1565b604051808215151515815260200191505060405180910390f35b610517600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff1690602001909291905050506116d4565b604051808215151515815260200191505060405180910390f35b34801561053d57600080fd5b50610546611d7a565b005b34801561055457600080fd5b5061055d611e7f565b005b34801561056b57600080fd5b50610574611f40565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105c257600080fd5b506105f7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f66565b604051808215151515815260200191505060405180910390f35b34801561061d57600080fd5b50610658600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff16906020019092919050505061205f565b604051808215151515815260200191505060405180910390f35b34801561067e57600080fd5b506106b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612452565b604051808215151515815260200191505060405180910390f35b3480156106d957600080fd5b50610704600480360381019080803569ffffffffffffffffffff1690602001909291905050506124af565b6040518082815260200191505060405180910390f35b34801561072657600080fd5b5061075b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124db565b604051808215151515815260200191505060405180910390f35b34801561078157600080fd5b5061078a6125fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107d857600080fd5b50610813600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050612624565b604051808215151515815260200191505060405180910390f35b34801561083957600080fd5b50610864600480360381019080803569ffffffffffffffffffff1690602001909291905050506128c1565b6040518082815260200191505060405180910390f35b34801561088657600080fd5b506108a8600480360381019080803560ff16906020019092919050505061290f565b604051808215151515815260200191505060405180910390f35b3480156108ce57600080fd5b506108d76129ff565b604051808215151515815260200191505060405180910390f35b3480156108fd57600080fd5b50610932600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b51565b005b34801561094057600080fd5b5061096b600480360381019080803569ffffffffffffffffffff169060200190929190505050612ca9565b6040518082815260200191505060405180910390f35b34801561098d57600080fd5b506109c8600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050612e3b565b604051808215151515815260200191505060405180910390f35b3480156109ee57600080fd5b50610a49600480360381019080803569ffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803563ffffffff169060200190929190505050613063565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610a89578082015181840152602081019050610a6e565b50505050905090810190601f168015610ab65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b0b600480360381019080803569ffffffffffffffffffff169060200190929190803563ffffffff169060200190929190803560ff169060200190929190505050613192565b604051808215151515815260200191505060405180910390f35b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b8357600080fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f1cfba79c837dd282b5affd88ad85c693d8f3fc6abb9999b92849f776f499045b60405160405180910390a260019050919050565b6000809054906101000a900460ff1681565b6000600160008469ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600560008369ffffffffffffffffffff168152602001908152602001600020600001549050919050565b6060600160008369ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805480602002602001604051908101604052809291908181526020018280548015610d9857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d4e575b50505050509050919050565b6000600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff169050919050565b6000610dfc613a2c565b610e04613a2c565b6000606060006060600660009054906101000a900460ff16151515610e2857600080fd5b893373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610eb157600080fd5b60026004811115610ebe57fe5b600160008d69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff166004811115610f0557fe5b141515610f1157600080fd5b8863ffffffff16600160008d69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161480610fb257508863ffffffff16600160008d69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16145b1515610fbd57600080fd5b610ffb6040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061355a565b96506110068a61355a565b9550600161101d888861358890919063ffffffff16565b019450600160008c69ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156110ce57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611084575b505050505093508351851415156110e457600080fd5b600092505b848360ff1610156111d85761110f61110a88886135ff90919063ffffffff16565b613619565b915081600160008d69ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206005016000868660ff1681518110151561115357fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b63ffffffff1663ffffffff16815260200190815260200160002060000190805190602001906111ca929190613a46565b5082806001019350506110e9565b60018060008d69ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060020160008b63ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506112448b61367b565b508863ffffffff168b69ffffffffffffffffffff167f8a59d01dda427123e224b10a5103435e6a94ce386bd3d81052074263f9defce88c6040518080602001828103825283818151815260200191508051906020019080838360005b838110156112bb5780820151818401526020810190506112a0565b50505050905090810190601f1680156112e85780820380516001836020036101000a031916815260200191505b509250505060405180910390a360019750505050505050509392505050565b600080600080600660009054906101000a900460ff1615151561132957600080fd5b843373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156113b257600080fd5b600360048111156113bf57fe5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff16600481111561140657fe5b14151561141257600080fd5b6004600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff0219169083600481111561145d57fe5b021790555061146b86612ca9565b9350600092505b600160008769ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508360ff1610156115bb57600160008769ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003018360ff168154811015156114ec57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915061156b84600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461382b90919063ffffffff16565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508280600101935050611472565b8569ffffffffffffffffffff167f5c31eea1382076853b0d0e7c4e8c4d8601bb83e9c07aeb582ae9a1fcd2928ebb60405160405180910390a26001945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561165d57600080fd5b600660009054906101000a900460ff16151561167857600080fd5b6000600660006101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600660009054906101000a900460ff1681565b600060606000600660009054906101000a900460ff161515156116f657600080fd5b843373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561177f57600080fd5b6000600481111561178c57fe5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff1660048111156117d357fe5b1415156117df57600080fd5b6000341115156117ee57600080fd5b6000600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161415156118e7578463ffffffff16600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161415151561189557600080fd5b84600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055506119e6565b6000600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161415156119e0578463ffffffff16600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161415151561198e57600080fd5b84600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff1602179055506119e5565b600080fd5b5b6002600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff02191690836004811115611a3157fe5b0217905550600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d16ddf36000809054906101000a900460ff166040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260ff168152602001915050600060405180830381600087803b158015611ad857600080fd5b505af1158015611aec573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611b1657600080fd5b810190808051640100000000811115611b2e57600080fd5b82810190506020810184811115611b4457600080fd5b8151856020820283011164010000000082111715611b6157600080fd5b505092919050505092506000809054906101000a900460ff1660ff168351141515611b8b57600080fd5b600091505b82518260ff161015611c465760018060008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206004016000858560ff16815181101515611bde57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508180600101925050611b90565b82600160008869ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003019080519060200190611c88929190613ac6565b5034600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008763ffffffff1663ffffffff168152602001908152602001600020819055508463ffffffff168669ffffffffffffffffffff167fa6115165a89d929fa9c050d5546756b15c16b4cbf0ed66bd893c9209aff2db4485346040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015611d59578082015181840152602081019050611d3e565b50505050905001935050505060405180910390a36001935050505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dd657600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611edb57600080fd5b600660009054906101000a900460ff16151515611ef757600080fd5b6001600660006101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611fc457600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558173ffffffffffffffffffffffffffffffffffffffff167ff9f012dbf94ec6f26d3a73fbbae56a56fc7b236c4390d891201576ba3aaeb89160405160405180910390a260019050919050565b60008060008060011515600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156120c457600080fd5b6000600560008869ffffffffffffffffffff16815260200190815260200160002060000154141515156120f657600080fd5b6003600481111561210357fe5b600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff16600481111561214a57fe5b14151561215657600080fd5b600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff168563ffffffff1614806121f75750600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff168563ffffffff16145b151561220257600080fd5b8463ffffffff16600560008869ffffffffffffffffffff168152602001908152602001600020600101819055506004600160008869ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff0219169083600481111561227a57fe5b021790555061228886612ca9565b9250600091505b600160008769ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508260ff1610156123d857600160008769ffffffffffffffffffff1669ffffffffffffffffffff1681526020019081526020016000206003018260ff1681548110151561230957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061238883600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461382b90919063ffffffff16565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550818060010192505061228f565b3373ffffffffffffffffffffffffffffffffffffffff168563ffffffff167f91cd4f1183722432c51b6df8de80eef3598ebc4ef71ce76150fd2c8e4ed9b09288604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390a36001935050505092915050565b600060011515600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b6000600560008369ffffffffffffffffffff168152602001908152602001600020600101549050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561253957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561257557600080fd5b81600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f70a92b8c5bb39169e0a947c5d3a1fa4a03256fa46ed634a51a75ef801c4bd01c60405160405180910390a2919050565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660009054906101000a900460ff1615151561264257600080fd5b823373ffffffffffffffffffffffffffffffffffffffff16600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156126cb57600080fd5b600060048111156126d857fe5b600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff16600481111561271f57fe5b14151561272b57600080fd5b6000600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008563ffffffff1663ffffffff1681526020019081526020016000205411151561278557600080fd5b60018060008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff021916908360048111156127cf57fe5b02179055503373ffffffffffffffffffffffffffffffffffffffff166108fc600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008663ffffffff1663ffffffff168152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015612865573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff168469ffffffffffffffffffff167f6e2a76d5e51755e0d0ead9415eb85f81de3e3024755a804f28728cf4c42adb1d60405160405180910390a3600191505092915050565b6000600160008369ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff169050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561296d57600080fd5b60038260ff161015151561298057600080fd5b600060028360ff1681151561299157fe5b0660ff16141515156129a257600080fd5b816000806101000a81548160ff021916908360ff1602179055507f9b0b2211ad6eb917787b88e888ce2b894e4e4c5111f1347c1b857a76a1b634ea82604051808260ff16815260200191505060405180910390a160019050919050565b600080600660009054906101000a900460ff16151515612a1e57600080fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111515612a6f57600080fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbcacd35e44ebcdaa615013d05335c060187b65a417e24f0714a9a6b629d64137826040518082815260200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612b48573d6000803e3d6000fd5b50600191505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612bad57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612be957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000806000806000600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff169550600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff169450600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008763ffffffff1663ffffffff168152602001908152602001600020549350600160008969ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008663ffffffff1663ffffffff168152602001908152602001600020549250612de5838561382b90919063ffffffff16565b9150612e2b600160008a69ffffffffffffffffffff1669ffffffffffffffffffff168152602001908152602001600020600301805490508361384790919063ffffffff16565b9050809650505050505050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e9957600080fd5b6000600560008569ffffffffffffffffffff16815260200190815260200160002060000154141515612eca57600080fd5b8163ffffffff16600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161480612f6b57508163ffffffff16600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff16145b1515612f7657600080fd5b60036004811115612f8357fe5b600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160009054906101000a900460ff166004811115612fca57fe5b141515612fd657600080fd5b8163ffffffff16600560008569ffffffffffffffffffff168152602001908152602001600020600001819055508163ffffffff167f1091687dccfb26b1f39c83752f98f95d7220fd8aeedcc9cea7d8c312af711cc184604051808269ffffffffffffffffffff1669ffffffffffffffffffff16815260200191505060405180910390a26001905092915050565b6060600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060050160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131845780601f1061315957610100808354040283529160200191613184565b820191906000526020600020905b81548152906001019060200180831161316757829003601f168201915b505050505090509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156131f057600080fd5b600660009054906101000a900460ff1615151561320c57600080fd5b816000600181111561321a57fe5b81600181111561322657fe5b1480613247575060018081111561323957fe5b81600181111561324557fe5b145b151561325257600080fd5b6000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff1663ffffffff161415156132a557600080fd5b6000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff1663ffffffff161415156132f857600080fd5b60003411151561330757600080fd5b82600181111561331357fe5b6000600181111561332057fe5b14156133745783600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160146101000a81548163ffffffff021916908363ffffffff1602179055505b82600181111561338057fe5b60018081111561338c57fe5b14156133e05783600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160186101000a81548163ffffffff021916908363ffffffff1602179055505b33600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff0219169083600481111561349857fe5b021790555034600160008769ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060010160008663ffffffff1663ffffffff168152602001908152602001600020819055508363ffffffff168569ffffffffffffffffffff167fe435d37c6b977d33a57d31d222155c537fde79601f1609f780be49c06d03c67285346040518083600181111561353457fe5b60ff1681526020018281526020019250505060405180910390a360019150509392505050565b613562613a2c565b600060208301905060408051908101604052808451815260200182815250915050919050565b60008082600001516135ac856000015186602001518660000151876020015161385d565b0190505b8360000151846020015101811115156135f857818060010192505082600001516135f085602001518303866000015103838660000151876020015161385d565b0190506135b0565b5092915050565b613607613a2c565b613612838383613943565b5092915050565b606080600083600001516040519080825280601f01601f1916602001820160405280156136555781602001602082028038833980820191505090505b50915060208201905061367181856020015186600001516139e1565b8192505050919050565b6000806000600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900463ffffffff169150600160008569ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060000160189054906101000a900463ffffffff16905060011515600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060020160008463ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff1615151480156137ca575060011515600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060020160008363ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff161515145b15613820576003600160008669ffffffffffffffffffff1669ffffffffffffffffffff16815260200190815260200160002060060160006101000a81548160ff0219169083600481111561381a57fe5b02179055505b600192505050919050565b6000818301905082811015151561383e57fe5b80905092915050565b6000818381151561385457fe5b04905092915050565b60008060008060008060008060008b97508c8b11151561392d5760208b1115156138e75760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b846000191683600019161415156138df5783881015156138cc578c8c019850613933565b87806001019850508588511692506138a8565b879850613933565b8a8a209150600096505b8a8d038711151561392c578a8820905080600019168260001916141561391957879850613933565b60018801975086806001019750506138f1565b5b8c8c0198505b5050505050505050949350505050565b61394b613a2c565b6000613969856000015186602001518660000151876020015161385d565b905084602001518360200181815250508460200151810383600001818152505084600001518560200151018114156139ab5760008560000181815250506139d6565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b602082101515613a0957825184526020840193506020830192506020820391506139e4565b6001826020036101000a0390508019835116818551168181178652505050505050565b604080519081016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a8757805160ff1916838001178555613ab5565b82800160010185558215613ab5579182015b82811115613ab4578251825591602001919060010190613a99565b5b509050613ac29190613b50565b5090565b828054828255906000526020600020908101928215613b3f579160200282015b82811115613b3e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190613ae6565b5b509050613b4c9190613b75565b5090565b613b7291905b80821115613b6e576000816000905550600101613b56565b5090565b90565b613bb591905b80821115613bb157600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101613b7b565b5090565b905600a165627a7a723058207a643a46be9248347060ccf0f05b872d2ce1e360ad30468d5508b62ff9a1474d0029";

    private Trade(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Trade(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<LogCreateOrderEventResponse> getLogCreateOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogCreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogCreateOrderEventResponse> responses = new ArrayList<LogCreateOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogCreateOrderEventResponse typedResponse = new LogCreateOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogCreateOrderEventResponse> logCreateOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogCreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogCreateOrderEventResponse>() {
            @Override
            public LogCreateOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogCreateOrderEventResponse typedResponse = new LogCreateOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogCancelTradeEventResponse> getLogCancelTradeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogCancelTrade", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogCancelTradeEventResponse> responses = new ArrayList<LogCancelTradeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogCancelTradeEventResponse typedResponse = new LogCancelTradeEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogCancelTradeEventResponse> logCancelTradeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogCancelTrade", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogCancelTradeEventResponse>() {
            @Override
            public LogCancelTradeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogCancelTradeEventResponse typedResponse = new LogCancelTradeEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogConfirmTradeOrderEventResponse> getLogConfirmTradeOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogConfirmTradeOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogConfirmTradeOrderEventResponse> responses = new ArrayList<LogConfirmTradeOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogConfirmTradeOrderEventResponse typedResponse = new LogConfirmTradeOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.trustees = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogConfirmTradeOrderEventResponse> logConfirmTradeOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogConfirmTradeOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogConfirmTradeOrderEventResponse>() {
            @Override
            public LogConfirmTradeOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogConfirmTradeOrderEventResponse typedResponse = new LogConfirmTradeOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.trustees = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUploadSecretEventResponse> getLogUploadSecretEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUploadSecret", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUploadSecretEventResponse> responses = new ArrayList<LogUploadSecretEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUploadSecretEventResponse typedResponse = new LogUploadSecretEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.secrets = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUploadSecretEventResponse> logUploadSecretEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUploadSecret", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUploadSecretEventResponse>() {
            @Override
            public LogUploadSecretEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUploadSecretEventResponse typedResponse = new LogUploadSecretEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.secrets = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogFinishOrderEventResponse> getLogFinishOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogFinishOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogFinishOrderEventResponse> responses = new ArrayList<LogFinishOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogFinishOrderEventResponse typedResponse = new LogFinishOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogFinishOrderEventResponse> logFinishOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogFinishOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogFinishOrderEventResponse>() {
            @Override
            public LogFinishOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogFinishOrderEventResponse typedResponse = new LogFinishOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogWithdrawFeeEventResponse> getLogWithdrawFeeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogWithdrawFee", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogWithdrawFeeEventResponse> responses = new ArrayList<LogWithdrawFeeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogWithdrawFeeEventResponse typedResponse = new LogWithdrawFeeEventResponse();
            typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogWithdrawFeeEventResponse> logWithdrawFeeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogWithdrawFee", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogWithdrawFeeEventResponse>() {
            @Override
            public LogWithdrawFeeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogWithdrawFeeEventResponse typedResponse = new LogWithdrawFeeEventResponse();
                typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<PauseEventResponse> getPauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Pause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<PauseEventResponse> responses = new ArrayList<PauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            PauseEventResponse typedResponse = new PauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PauseEventResponse> pauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Pause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, PauseEventResponse>() {
            @Override
            public PauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                PauseEventResponse typedResponse = new PauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<UnpauseEventResponse> getUnpauseEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Unpause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UnpauseEventResponse> responses = new ArrayList<UnpauseEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UnpauseEventResponse typedResponse = new UnpauseEventResponse();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnpauseEventResponse> unpauseEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Unpause", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnpauseEventResponse>() {
            @Override
            public UnpauseEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UnpauseEventResponse typedResponse = new UnpauseEventResponse();
                return typedResponse;
            }
        });
    }

    public List<ArbitrateEventResponse> getArbitrateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Arbitrate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ArbitrateEventResponse> responses = new ArrayList<ArbitrateEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ArbitrateEventResponse typedResponse = new ArbitrateEventResponse();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ArbitrateEventResponse> arbitrateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Arbitrate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ArbitrateEventResponse>() {
            @Override
            public ArbitrateEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ArbitrateEventResponse typedResponse = new ArbitrateEventResponse();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<JudgeEventResponse> getJudgeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Judge", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<JudgeEventResponse> responses = new ArrayList<JudgeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            JudgeEventResponse typedResponse = new JudgeEventResponse();
            typedResponse.winner = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.judge = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<JudgeEventResponse> judgeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Judge", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, JudgeEventResponse>() {
            @Override
            public JudgeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                JudgeEventResponse typedResponse = new JudgeEventResponse();
                typedResponse.winner = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.judge = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddArbitratorEventResponse> getAddArbitratorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddArbitratorEventResponse> responses = new ArrayList<AddArbitratorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddArbitratorEventResponse typedResponse = new AddArbitratorEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddArbitratorEventResponse> addArbitratorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddArbitratorEventResponse>() {
            @Override
            public AddArbitratorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddArbitratorEventResponse typedResponse = new AddArbitratorEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveArbitratorEventResponse> getRemoveArbitratorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveArbitratorEventResponse> responses = new ArrayList<RemoveArbitratorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveArbitratorEventResponse typedResponse = new RemoveArbitratorEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveArbitratorEventResponse> removeArbitratorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveArbitratorEventResponse>() {
            @Override
            public RemoveArbitratorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveArbitratorEventResponse typedResponse = new RemoveArbitratorEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUpdateDefaultTrusteeNumberEventResponse> getLogUpdateDefaultTrusteeNumberEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUpdateDefaultTrusteeNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUpdateDefaultTrusteeNumberEventResponse> responses = new ArrayList<LogUpdateDefaultTrusteeNumberEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUpdateDefaultTrusteeNumberEventResponse typedResponse = new LogUpdateDefaultTrusteeNumberEventResponse();
            typedResponse.newNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUpdateDefaultTrusteeNumberEventResponse> logUpdateDefaultTrusteeNumberEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUpdateDefaultTrusteeNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUpdateDefaultTrusteeNumberEventResponse>() {
            @Override
            public LogUpdateDefaultTrusteeNumberEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUpdateDefaultTrusteeNumberEventResponse typedResponse = new LogUpdateDefaultTrusteeNumberEventResponse();
                typedResponse.newNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUpdateTrusteeContractEventResponse> getLogUpdateTrusteeContractEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUpdateTrusteeContract", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUpdateTrusteeContractEventResponse> responses = new ArrayList<LogUpdateTrusteeContractEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUpdateTrusteeContractEventResponse typedResponse = new LogUpdateTrusteeContractEventResponse();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUpdateTrusteeContractEventResponse> logUpdateTrusteeContractEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUpdateTrusteeContract", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUpdateTrusteeContractEventResponse>() {
            @Override
            public LogUpdateTrusteeContractEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUpdateTrusteeContractEventResponse typedResponse = new LogUpdateTrusteeContractEventResponse();
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> addArbitrator(String who) {
        Function function = new Function(
                "addArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> trusteeNumber() {
        Function function = new Function("trusteeNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Boolean> isOrderTrustee(BigInteger orderID, String user) {
        Function function = new Function("isOrderTrustee", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getRequester(BigInteger orderID) {
        Function function = new Function("getRequester", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List<String>> getOrderTrustees(BigInteger orderID) {
        Function function = new Function("getOrderTrustees", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List<String>.class);
    }

    public RemoteCall<BigInteger> getOrderBuyer(BigInteger orderID) {
        Function function = new Function("getOrderBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> uploadSecret(BigInteger orderID, String secrets, BigInteger userID) {
        Function function = new Function(
                "uploadSecret", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Utf8String(secrets), 
                new org.web3j.abi.datatypes.generated.Uint32(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> finishOrder(BigInteger orderID) {
        Function function = new Function(
                "finishOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> unpause() {
        Function function = new Function(
                "unpause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> paused() {
        Function function = new Function("paused", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> confirmTradeOrder(BigInteger orderID, BigInteger userID, BigInteger weiValue) {
        Function function = new Function(
                "confirmTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> pause() {
        Function function = new Function(
                "pause", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeArbitrator(String who) {
        Function function = new Function(
                "removeArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> judge(BigInteger orderID, BigInteger winner) {
        Function function = new Function(
                "judge", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(winner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isArbitrator(String who) {
        Function function = new Function("isArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> getWinner(BigInteger orderID) {
        Function function = new Function("getWinner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateTrusteeContract(String _trustee) {
        Function function = new Function(
                "updateTrusteeContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trusteeContract() {
        Function function = new Function("trusteeContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> cancelTrade(BigInteger orderID, BigInteger createUserID) {
        Function function = new Function(
                "cancelTrade", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(createUserID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOrderSeller(BigInteger orderID) {
        Function function = new Function("getOrderSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateDefaultTrusteeNumber(BigInteger _trusteeNumber) {
        Function function = new Function(
                "updateDefaultTrusteeNumber", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_trusteeNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawFee() {
        Function function = new Function(
                "withdrawFee", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getPerFeeOfOrder(BigInteger orderID) {
        Function function = new Function("getPerFeeOfOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> arbitrate(BigInteger orderID, BigInteger user) {
        Function function = new Function(
                "arbitrate", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getSecret(BigInteger orderID, String trusteeID, BigInteger user) {
        Function function = new Function("getSecret", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.Address(trusteeID), 
                new org.web3j.abi.datatypes.generated.Uint32(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createNewTradeOrder(BigInteger orderID, BigInteger userID, BigInteger userType, BigInteger weiValue) {
        Function function = new Function(
                "createNewTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(orderID), 
                new org.web3j.abi.datatypes.generated.Uint32(userID), 
                new org.web3j.abi.datatypes.generated.Uint8(userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Trade load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Trade load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class LogCreateOrderEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public BigInteger userType;

        public BigInteger feePayed;
    }

    public static class LogCancelTradeEventResponse {
        public BigInteger orderID;

        public String creator;
    }

    public static class LogConfirmTradeOrderEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public List<String> trustees;

        public BigInteger feePayed;
    }

    public static class LogUploadSecretEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public String secrets;
    }

    public static class LogFinishOrderEventResponse {
        public BigInteger orderID;
    }

    public static class LogWithdrawFeeEventResponse {
        public String trustee;

        public BigInteger amount;
    }

    public static class PauseEventResponse {
    }

    public static class UnpauseEventResponse {
    }

    public static class ArbitrateEventResponse {
        public BigInteger user;

        public BigInteger orderID;
    }

    public static class JudgeEventResponse {
        public BigInteger winner;

        public String judge;

        public BigInteger orderID;
    }

    public static class AddArbitratorEventResponse {
        public String who;
    }

    public static class RemoveArbitratorEventResponse {
        public String who;
    }

    public static class LogUpdateDefaultTrusteeNumberEventResponse {
        public BigInteger newNumber;
    }

    public static class LogUpdateTrusteeContractEventResponse {
        public String newAddress;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
