
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Trade extends Contract {
    private static final String BINARY = "6080604052600560005533600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612ed6806100596000396000f300608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301fabd7514610159578063044f4a4e146101b45780633e36f2b1146101df5780634129b2c9146102af5780635abcbc51146102f057806364339dbf1461033f578063715018a61461038e57806382d0d319146103a5578063863457b7146103e65780638da5cb5b1461042b57806394ff367614610482578063973ad270146104c357806397a33e881461051e57806399c6679d1461056d5780639d5bd1d7146105ae5780639f6bd2a914610630578063ad7ce5501461068b578063bb133331146106e6578063c28932321461073d578063dde9f9241461077f578063e5fb9daa14610814578063e941fa7814610863578063ee724e2014610892578063f012be38146108f7578063f0d069261461093c578063f2fde38b1461097d575b600080fd5b34801561016557600080fd5b5061019a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109c0565b604051808215151515815260200191505060405180910390f35b3480156101c057600080fd5b506101c9610ac2565b6040518082815260200191505060405180910390f35b3480156101eb57600080fd5b5061023460048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ac8565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610274578082015181840152602081019050610259565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102bb57600080fd5b506102da60048036038101908080359060200190929190505050610bd3565b6040518082815260200191505060405180910390f35b3480156102fc57600080fd5b506103256004803603810190808035906020019092919080359060200190929190505050610bf3565b604051808215151515815260200191505060405180910390f35b34801561034b57600080fd5b506103746004803603810190808035906020019092919080359060200190929190505050610edc565b604051808215151515815260200191505060405180910390f35b34801561039a57600080fd5b506103a36110c2565b005b3480156103b157600080fd5b506103d0600480360381019080803590602001909291905050506111c7565b6040518082815260200191505060405180910390f35b3480156103f257600080fd5b50610411600480360381019080803590602001909291905050506111e7565b604051808215151515815260200191505060405180910390f35b34801561043757600080fd5b506104406112b8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561048e57600080fd5b506104ad600480360381019080803590602001909291905050506112de565b6040518082815260200191505060405180910390f35b3480156104cf57600080fd5b50610504600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113c0565b604051808215151515815260200191505060405180910390f35b34801561052a57600080fd5b5061055360048036038101908080359060200190929190803590602001909291905050506114b9565b604051808215151515815260200191505060405180910390f35b34801561057957600080fd5b5061059860048036038101908080359060200190929190505050611625565b6040518082815260200191505060405180910390f35b3480156105ba57600080fd5b506105d960048036038101908080359060200190929190505050611645565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561061c578082015181840152602081019050610601565b505050509050019250505060405180910390f35b34801561063c57600080fd5b50610671600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116e9565b604051808215151515815260200191505060405180910390f35b34801561069757600080fd5b506106cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611746565b604051808215151515815260200191505060405180910390f35b3480156106f257600080fd5b506106fb611869565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610765600480360381019080803590602001909291908035906020019092919050505061188f565b604051808215151515815260200191505060405180910390f35b34801561078b57600080fd5b506107fa60048036038101908080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611d1f565b604051808215151515815260200191505060405180910390f35b6108496004803603810190808035906020019092919080359060200190929190803560ff169060200190929190505050612109565b604051808215151515815260200191505060405180910390f35b34801561086f57600080fd5b5061087861238f565b604051808215151515815260200191505060405180910390f35b34801561089e57600080fd5b506108dd60048036038101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124c5565b604051808215151515815260200191505060405180910390f35b34801561090357600080fd5b5061092260048036038101908080359060200190929190505050612530565b604051808215151515815260200191505060405180910390f35b34801561094857600080fd5b5061096760048036038101908080359060200190929190505050612784565b6040518082815260200191505060405180910390f35b34801561098957600080fd5b506109be600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127a4565b005b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a1e57600080fd5b6001600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f1cfba79c837dd282b5affd88ad85c693d8f3fc6abb9999b92849f776f499045b60405160405180910390a260019050919050565b60005481565b60606002600085815260200190815260200160002060070160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bc55780601f10610b9a57610100808354040283529160200191610bc5565b820191906000526020600020905b815481529060010190602001808311610ba857829003601f168201915b505050505090509392505050565b600060066000838152602001908152602001600020600101549050919050565b60008060008060011515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610c5857600080fd5b6000600660008881526020019081526020016000206000015414151515610c7e57600080fd5b60036004811115610c8b57fe5b6002600088815260200190815260200160002060080160009054906101000a900460ff166004811115610cba57fe5b141515610cc657600080fd5b6002600087815260200190815260200160002060010154851480610cff5750600260008781526020019081526020016000206002015485145b1515610d0a57600080fd5b84600660008881526020019081526020016000206001018190555060046002600088815260200190815260200160002060080160006101000a81548160ff02191690836004811115610d5857fe5b0217905550610d66866112de565b9250600091505b6002600087815260200190815260200160002060050180549050821015610e80576002600087815260200190815260200160002060050182815481101515610db157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e3083600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128fc90919063ffffffff16565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508180600101925050610d6d565b3373ffffffffffffffffffffffffffffffffffffffff16857f15c344b2775b6729564ceb0bd0971860f1f1d150ba24d1e4791336e3de69a186886040518082815260200191505060405180910390a36001935050505092915050565b6000823373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f4f57600080fd5b60006004811115610f5c57fe5b6002600086815260200190815260200160002060080160009054906101000a900460ff166004811115610f8b57fe5b141515610f9757600080fd5b600060026000868152602001908152602001600020600301600085815260200190815260200160002054111515610fcd57600080fd5b60016002600086815260200190815260200160002060080160006101000a81548160ff0219169083600481111561100057fe5b02179055503373ffffffffffffffffffffffffffffffffffffffff166108fc600260008781526020019081526020016000206003016000868152602001908152602001600020549081150290604051600060405180830381858888f19350505050158015611072573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff16847f3c4087999413dcdbaef5bd844641df15b3ca0247300aa64970c593eff175f34460405160405180910390a3600191505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561111e57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a26000600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600060026000838152602001908152602001600020600201549050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561124557600080fd5b6003821015151561125557600080fd5b600060028381151561126357fe5b061415151561127157600080fd5b816000819055507f9b0b2211ad6eb917787b88e888ce2b894e4e4c5111f1347c1b857a76a1b634ea826040518082815260200191505060405180910390a160019050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000806000600260008981526020019081526020016000206001015495506002600089815260200190815260200160002060020154945060026000898152602001908152602001600020600301600087815260200190815260200160002054935060026000898152602001908152602001600020600301600086815260200190815260200160002054925061138283856128fc90919063ffffffff16565b91506113b0600260008a8152602001908152602001600020600501805490508361291890919063ffffffff16565b9050809650505050505050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141e57600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558173ffffffffffffffffffffffffffffffffffffffff167ff9f012dbf94ec6f26d3a73fbbae56a56fc7b236c4390d891201576ba3aaeb89160405160405180910390a260019050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561151757600080fd5b6000600660008581526020019081526020016000206000015414151561153c57600080fd5b81600260008581526020019081526020016000206001015414806115755750816002600085815260200190815260200160002060020154145b151561158057600080fd5b6003600481111561158d57fe5b6002600085815260200190815260200160002060080160009054906101000a900460ff1660048111156115bc57fe5b1415156115c857600080fd5b816006600085815260200190815260200160002060000181905550817fca7a894485c8732d3fb8c51d75f9bd5d60116afe2c5a90aca9a99e9f0b9afca8846040518082815260200191505060405180910390a26001905092915050565b600060066000838152602001908152602001600020600001549050919050565b6060600260008381526020019081526020016000206005018054806020026020016040519081016040528092919081815260200182805480156116dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611693575b50505050509050919050565b600060011515600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515149050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117a457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117e057600080fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f70a92b8c5bb39169e0a947c5d3a1fa4a03256fa46ed634a51a75ef801c4bd01c60405160405180910390a2919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060606000843373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561190657600080fd5b6000600481111561191357fe5b6002600088815260200190815260200160002060080160009054906101000a900460ff16600481111561194257fe5b14151561194e57600080fd5b60003411151561195d57600080fd5b600060026000888152602001908152602001600020600101541415156119c257846002600088815260200190815260200160002060010154141515156119a257600080fd5b846002600088815260200190815260200160002060020181905550611a2d565b60006002600088815260200190815260200160002060020154141515611a275784600260008881526020019081526020016000206002015414151515611a0757600080fd5b846002600088815260200190815260200160002060010181905550611a2c565b600080fd5b5b600280600088815260200190815260200160002060080160006101000a81548160ff02191690836004811115611a5f57fe5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632d16ddf36000546040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b158015611af757600080fd5b505af1158015611b0b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015611b3557600080fd5b810190808051640100000000811115611b4d57600080fd5b82810190506020810184811115611b6357600080fd5b8151856020820283011164010000000082111715611b8057600080fd5b505092919050505092506000548351141515611b9b57600080fd5b600091505b8251821015611c395760016002600088815260200190815260200160002060060160008585815181101515611bd157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508180600101925050611ba0565b82600260008881526020019081526020016000206005019080519060200190611c63929190612d1e565b50346002600088815260200190815260200160002060030160008781526020019081526020016000208190555084867f4ae485a448a65d94b758369122f4ca445def18b565687751f001f6255b49a44185346040518080602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015611cfe578082015181840152602081019050611ce3565b50505050905001935050505060405180910390a36001935050505092915050565b6000611d29612da8565b611d31612da8565b6000606060006060893373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611daa57600080fd5b60026004811115611db757fe5b600260008d815260200190815260200160002060080160009054906101000a900460ff166004811115611de657fe5b141515611df257600080fd5b88600260008d8152602001908152602001600020600101541480611e2b575088600260008d815260200190815260200160002060020154145b1515611e3657600080fd5b611e746040805190810160405280600181526020017f2c0000000000000000000000000000000000000000000000000000000000000081525061292e565b9650611e7f8a61292e565b95506001611e96888861295c90919063ffffffff16565b019450600260008c8152602001908152602001600020600501805480602002602001604051908101604052809291908181526020018280548015611f2f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ee5575b50505050509350835185141515611f4557600080fd5b600092505b8483101561200f57611f6d611f6888886129d390919063ffffffff16565b6129ed565b915081600260008d815260200190815260200160002060070160008686815181101515611f9657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000019080519060200190612001929190612dc2565b508280600101935050611f4a565b6001600260008d815260200190815260200160002060040160008b815260200190815260200160002060006101000a81548160ff0219169083151502179055506120588b612a4f565b50888b7f0f5db3f75b51f453af77d045a106926ea59f07d208ea8c765e62f6f4c039437c8c6040518080602001828103825283818151815260200191508051906020019080838360005b838110156120bd5780820151818401526020810190506120a2565b50505050905090810190601f1680156120ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390a360019750505050505050509392505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561216757600080fd5b816000600181111561217557fe5b81600181111561218157fe5b14806121a2575060018081111561219457fe5b8160018111156121a057fe5b145b15156121ad57600080fd5b600060026000878152602001908152602001600020600101541415156121d257600080fd5b600060026000878152602001908152602001600020600201541415156121f757600080fd5b60003411151561220657600080fd5b82600181111561221257fe5b6000600181111561221f57fe5b1415612241578360026000878152602001908152602001600020600101819055505b82600181111561224d57fe5b60018081111561225957fe5b141561227b578360026000878152602001908152602001600020600201819055505b336002600087815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006002600087815260200190815260200160002060080160006101000a81548160ff0219169083600481111561230357fe5b0217905550346002600087815260200190815260200160002060030160008681526020019081526020016000208190555083857fc4d6c21425350dbb55bd949ff6ef374a96d24ba3f50e0450735ee9a777523d9d85346040518083600181111561236957fe5b60ff1681526020018281526020019250505060405180910390a360019150509392505050565b600080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811115156123e357600080fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbcacd35e44ebcdaa615013d05335c060187b65a417e24f0714a9a6b629d64137826040518082815260200191505060405180910390a23373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156124bc573d6000803e3d6000fd5b50600191505090565b60006002600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080600080843373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156125a757600080fd5b600360048111156125b457fe5b6002600088815260200190815260200160002060080160009054906101000a900460ff1660048111156125e357fe5b1415156125ef57600080fd5b60046002600088815260200190815260200160002060080160006101000a81548160ff0219169083600481111561262257fe5b0217905550612630866112de565b9350600092505b600260008781526020019081526020016000206005018054905083101561274a57600260008781526020019081526020016000206005018381548110151561267b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506126fa84600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128fc90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508280600101935050612637565b857fd64ff73c449b09efcc9189886182f50329a3ce579b3a560967795f28726eaf7160405160405180910390a26001945050505050919050565b600060026000838152602001908152602001600020600101549050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561280057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561283c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000818301905082811015151561290f57fe5b80905092915050565b6000818381151561292557fe5b04905092915050565b612936612da8565b600060208301905060408051908101604052808451815260200182815250915050919050565b60008082600001516129808560000151866020015186600001518760200151612b4f565b0190505b8360000151846020015101811115156129cc57818060010192505082600001516129c4856020015183038660000151038386600001518760200151612b4f565b019050612984565b5092915050565b6129db612da8565b6129e6838383612c35565b5092915050565b606080600083600001516040519080825280601f01601f191660200182016040528015612a295781602001602082028038833980820191505090505b509150602082019050612a458185602001518660000151612cd3565b8192505050919050565b600080600060026000858152602001908152602001600020600101549150600260008581526020019081526020016000206002015490506001151560026000868152602001908152602001600020600401600084815260200190815260200160002060009054906101000a900460ff161515148015612b0657506001151560026000868152602001908152602001600020600401600083815260200190815260200160002060009054906101000a900460ff161515145b15612b445760036002600086815260200190815260200160002060080160006101000a81548160ff02191690836004811115612b3e57fe5b02179055505b600192505050919050565b60008060008060008060008060008b97508c8b111515612c1f5760208b111515612bd95760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b84600019168360001916141515612bd1578388101515612bbe578c8c019850612c25565b8780600101985050858851169250612b9a565b879850612c25565b8a8a209150600096505b8a8d0387111515612c1e578a88209050806000191682600019161415612c0b57879850612c25565b6001880197508680600101975050612be3565b5b8c8c0198505b5050505050505050949350505050565b612c3d612da8565b6000612c5b8560000151866020015186600001518760200151612b4f565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415612c9d576000856000018181525050612cc8565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b602082101515612cfb5782518452602084019350602083019250602082039150612cd6565b6001826020036101000a0390508019835116818551168181178652505050505050565b828054828255906000526020600020908101928215612d97579160200282015b82811115612d965782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612d3e565b5b509050612da49190612e42565b5090565b604080519081016040528060008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e0357805160ff1916838001178555612e31565b82800160010185558215612e31579182015b82811115612e30578251825591602001919060010190612e15565b5b509050612e3e9190612e85565b5090565b612e8291905b80821115612e7e57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101612e48565b5090565b90565b612ea791905b80821115612ea3576000816000905550600101612e8b565b5090565b905600a165627a7a7230582085a9b4bec01cf5981170c49590c322102b05dc5190adf946876860b9cca753500029";

    private Trade(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Trade(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<LogCreateOrderEventResponse> getLogCreateOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogCreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogCreateOrderEventResponse> responses = new ArrayList<LogCreateOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogCreateOrderEventResponse typedResponse = new LogCreateOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogCreateOrderEventResponse> logCreateOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogCreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogCreateOrderEventResponse>() {
            @Override
            public LogCreateOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogCreateOrderEventResponse typedResponse = new LogCreateOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogCancelTradeEventResponse> getLogCancelTradeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogCancelTrade", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogCancelTradeEventResponse> responses = new ArrayList<LogCancelTradeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogCancelTradeEventResponse typedResponse = new LogCancelTradeEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogCancelTradeEventResponse> logCancelTradeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogCancelTrade", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogCancelTradeEventResponse>() {
            @Override
            public LogCancelTradeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogCancelTradeEventResponse typedResponse = new LogCancelTradeEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogConfirmTradeOrderEventResponse> getLogConfirmTradeOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogConfirmTradeOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogConfirmTradeOrderEventResponse> responses = new ArrayList<LogConfirmTradeOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogConfirmTradeOrderEventResponse typedResponse = new LogConfirmTradeOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.trustees = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogConfirmTradeOrderEventResponse> logConfirmTradeOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogConfirmTradeOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogConfirmTradeOrderEventResponse>() {
            @Override
            public LogConfirmTradeOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogConfirmTradeOrderEventResponse typedResponse = new LogConfirmTradeOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.trustees = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.feePayed = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUploadSecretEventResponse> getLogUploadSecretEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUploadSecret", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUploadSecretEventResponse> responses = new ArrayList<LogUploadSecretEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUploadSecretEventResponse typedResponse = new LogUploadSecretEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.secrets = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUploadSecretEventResponse> logUploadSecretEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUploadSecret", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUploadSecretEventResponse>() {
            @Override
            public LogUploadSecretEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUploadSecretEventResponse typedResponse = new LogUploadSecretEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.secrets = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogFinishOrderEventResponse> getLogFinishOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogFinishOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogFinishOrderEventResponse> responses = new ArrayList<LogFinishOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogFinishOrderEventResponse typedResponse = new LogFinishOrderEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogFinishOrderEventResponse> logFinishOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogFinishOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogFinishOrderEventResponse>() {
            @Override
            public LogFinishOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogFinishOrderEventResponse typedResponse = new LogFinishOrderEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogWithdrawFeeEventResponse> getLogWithdrawFeeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogWithdrawFee", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogWithdrawFeeEventResponse> responses = new ArrayList<LogWithdrawFeeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogWithdrawFeeEventResponse typedResponse = new LogWithdrawFeeEventResponse();
            typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogWithdrawFeeEventResponse> logWithdrawFeeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogWithdrawFee", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogWithdrawFeeEventResponse>() {
            @Override
            public LogWithdrawFeeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogWithdrawFeeEventResponse typedResponse = new LogWithdrawFeeEventResponse();
                typedResponse.trustee = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ArbitrateEventResponse> getArbitrateEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Arbitrate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ArbitrateEventResponse> responses = new ArrayList<ArbitrateEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ArbitrateEventResponse typedResponse = new ArbitrateEventResponse();
            typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ArbitrateEventResponse> arbitrateEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Arbitrate", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ArbitrateEventResponse>() {
            @Override
            public ArbitrateEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ArbitrateEventResponse typedResponse = new ArbitrateEventResponse();
                typedResponse.user = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<JudgeEventResponse> getJudgeEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Judge", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<JudgeEventResponse> responses = new ArrayList<JudgeEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            JudgeEventResponse typedResponse = new JudgeEventResponse();
            typedResponse.winner = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.judge = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<JudgeEventResponse> judgeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Judge", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, JudgeEventResponse>() {
            @Override
            public JudgeEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                JudgeEventResponse typedResponse = new JudgeEventResponse();
                typedResponse.winner = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.judge = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddArbitratorEventResponse> getAddArbitratorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddArbitratorEventResponse> responses = new ArrayList<AddArbitratorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddArbitratorEventResponse typedResponse = new AddArbitratorEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddArbitratorEventResponse> addArbitratorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddArbitratorEventResponse>() {
            @Override
            public AddArbitratorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddArbitratorEventResponse typedResponse = new AddArbitratorEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveArbitratorEventResponse> getRemoveArbitratorEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveArbitratorEventResponse> responses = new ArrayList<RemoveArbitratorEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveArbitratorEventResponse typedResponse = new RemoveArbitratorEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveArbitratorEventResponse> removeArbitratorEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveArbitrator", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveArbitratorEventResponse>() {
            @Override
            public RemoveArbitratorEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveArbitratorEventResponse typedResponse = new RemoveArbitratorEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUpdateDefaultTrusteeNumberEventResponse> getLogUpdateDefaultTrusteeNumberEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUpdateDefaultTrusteeNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUpdateDefaultTrusteeNumberEventResponse> responses = new ArrayList<LogUpdateDefaultTrusteeNumberEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUpdateDefaultTrusteeNumberEventResponse typedResponse = new LogUpdateDefaultTrusteeNumberEventResponse();
            typedResponse.newNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUpdateDefaultTrusteeNumberEventResponse> logUpdateDefaultTrusteeNumberEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUpdateDefaultTrusteeNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUpdateDefaultTrusteeNumberEventResponse>() {
            @Override
            public LogUpdateDefaultTrusteeNumberEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUpdateDefaultTrusteeNumberEventResponse typedResponse = new LogUpdateDefaultTrusteeNumberEventResponse();
                typedResponse.newNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogUpdateTrusteeContractEventResponse> getLogUpdateTrusteeContractEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LogUpdateTrusteeContract", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<LogUpdateTrusteeContractEventResponse> responses = new ArrayList<LogUpdateTrusteeContractEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            LogUpdateTrusteeContractEventResponse typedResponse = new LogUpdateTrusteeContractEventResponse();
            typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogUpdateTrusteeContractEventResponse> logUpdateTrusteeContractEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LogUpdateTrusteeContract", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogUpdateTrusteeContractEventResponse>() {
            @Override
            public LogUpdateTrusteeContractEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                LogUpdateTrusteeContractEventResponse typedResponse = new LogUpdateTrusteeContractEventResponse();
                typedResponse.newAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> addArbitrator(String who) {
        Function function = new Function(
                "addArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> trusteeNumber() {
        Function function = new Function("trusteeNumber", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getSecret(BigInteger orderID, String trusteeID, BigInteger user) {
        Function function = new Function("getSecret", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.Address(trusteeID), 
                new org.web3j.abi.datatypes.generated.Uint256(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getWinner(BigInteger orderID) {
        Function function = new Function("getWinner", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> judge(BigInteger orderID, BigInteger winner) {
        Function function = new Function(
                "judge", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.generated.Uint256(winner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> cancelTrade(BigInteger orderID, BigInteger createUserID) {
        Function function = new Function(
                "cancelTrade", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.generated.Uint256(createUserID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOrderSeller(BigInteger orderID) {
        Function function = new Function("getOrderSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> updateDefaultTrusteeNumber(BigInteger _trusteeNumber) {
        Function function = new Function(
                "updateDefaultTrusteeNumber", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_trusteeNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getPerFeeOfOrder(BigInteger orderID) {
        Function function = new Function("getPerFeeOfOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> removeArbitrator(String who) {
        Function function = new Function(
                "removeArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> arbitrate(BigInteger orderID, BigInteger user) {
        Function function = new Function(
                "arbitrate", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.generated.Uint256(user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getRequester(BigInteger orderID) {
        Function function = new Function("getRequester", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<List<String>> getOrderTrustees(BigInteger orderID) {
        Function function = new Function("getOrderTrustees", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List<String>.class);
    }

    public RemoteCall<Boolean> isArbitrator(String who) {
        Function function = new Function("isArbitrator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> updateTrusteeContract(String _trustee) {
        Function function = new Function(
                "updateTrusteeContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustee)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trusteeContract() {
        Function function = new Function("trusteeContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> confirmTradeOrder(BigInteger orderID, BigInteger userID, BigInteger weiValue) {
        Function function = new Function(
                "confirmTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> uploadSecret(BigInteger orderID, String secrets, BigInteger userID) {
        Function function = new Function(
                "uploadSecret", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.Utf8String(secrets), 
                new org.web3j.abi.datatypes.generated.Uint256(userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createNewTradeOrder(BigInteger orderID, BigInteger userID, BigInteger userType, BigInteger weiValue) {
        Function function = new Function(
                "createNewTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.generated.Uint256(userID), 
                new org.web3j.abi.datatypes.generated.Uint8(userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawFee() {
        Function function = new Function(
                "withdrawFee", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isOrderTrustee(BigInteger orderID, String user) {
        Function function = new Function("isOrderTrustee", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID), 
                new org.web3j.abi.datatypes.Address(user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> finishOrder(BigInteger orderID) {
        Function function = new Function(
                "finishOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOrderBuyer(BigInteger orderID) {
        Function function = new Function("getOrderBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Trade.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Trade load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Trade load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class LogCreateOrderEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public BigInteger userType;

        public BigInteger feePayed;
    }

    public static class LogCancelTradeEventResponse {
        public BigInteger orderID;

        public String creator;
    }

    public static class LogConfirmTradeOrderEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public List<String> trustees;

        public BigInteger feePayed;
    }

    public static class LogUploadSecretEventResponse {
        public BigInteger orderID;

        public BigInteger user;

        public String secrets;
    }

    public static class LogFinishOrderEventResponse {
        public BigInteger orderID;
    }

    public static class LogWithdrawFeeEventResponse {
        public String trustee;

        public BigInteger amount;
    }

    public static class ArbitrateEventResponse {
        public BigInteger user;

        public BigInteger orderID;
    }

    public static class JudgeEventResponse {
        public BigInteger winner;

        public String judge;

        public BigInteger orderID;
    }

    public static class AddArbitratorEventResponse {
        public String who;
    }

    public static class RemoveArbitratorEventResponse {
        public String who;
    }

    public static class LogUpdateDefaultTrusteeNumberEventResponse {
        public BigInteger newNumber;
    }

    public static class LogUpdateTrusteeContractEventResponse {
        public String newAddress;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
