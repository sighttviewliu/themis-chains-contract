
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Trade extends Contract {
    private static final String BINARY = "";

    private Trade(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Trade(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<CreateOrderEventResponse> getCreateOrderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateOrderEventResponse> responses = new ArrayList<CreateOrderEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateOrderEventResponse typedResponse = new CreateOrderEventResponse();
            typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateOrderEventResponse> createOrderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateOrder", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateOrderEventResponse>() {
            @Override
            public CreateOrderEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateOrderEventResponse typedResponse = new CreateOrderEventResponse();
                typedResponse.buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<UploadEncryptedShardEventResponse> getUploadEncryptedShardEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UploadEncryptedShard", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UploadEncryptedShardEventResponse> responses = new ArrayList<UploadEncryptedShardEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UploadEncryptedShardEventResponse typedResponse = new UploadEncryptedShardEventResponse();
            typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.shards = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UploadEncryptedShardEventResponse> uploadEncryptedShardEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UploadEncryptedShard", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UploadEncryptedShardEventResponse>() {
            @Override
            public UploadEncryptedShardEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UploadEncryptedShardEventResponse typedResponse = new UploadEncryptedShardEventResponse();
                typedResponse.who = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.shards = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RecoverPrivKeyEventResponse> getRecoverPrivKeyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RecoverPrivKey", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RecoverPrivKeyEventResponse> responses = new ArrayList<RecoverPrivKeyEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RecoverPrivKeyEventResponse typedResponse = new RecoverPrivKeyEventResponse();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.privKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RecoverPrivKeyEventResponse> recoverPrivKeyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RecoverPrivKey", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RecoverPrivKeyEventResponse>() {
            @Override
            public RecoverPrivKeyEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RecoverPrivKeyEventResponse typedResponse = new RecoverPrivKeyEventResponse();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.privKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<UploadDecryptedShardsEventResponse> getUploadDecryptedShardsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UploadDecryptedShards", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UploadDecryptedShardsEventResponse> responses = new ArrayList<UploadDecryptedShardsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UploadDecryptedShardsEventResponse typedResponse = new UploadDecryptedShardsEventResponse();
            typedResponse.hoster = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.decryptedShard = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UploadDecryptedShardsEventResponse> uploadDecryptedShardsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UploadDecryptedShards", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UploadDecryptedShardsEventResponse>() {
            @Override
            public UploadDecryptedShardsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UploadDecryptedShardsEventResponse typedResponse = new UploadDecryptedShardsEventResponse();
                typedResponse.hoster = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.orderID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.userType = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.decryptedShard = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> vss() {
        Function function = new Function("vss", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isUserHoster(BigInteger _orderID) {
        Function function = new Function("isUserHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> uploadBuyerShardFromSeller(BigInteger _orderID, String _shard) {
        Function function = new Function(
                "uploadBuyerShardFromSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_shard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getSellerDecryptedShard(BigInteger _orderID, String _hoster) {
        Function function = new Function("getSellerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hoster)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getSellerShardByHosterID(BigInteger _orderID, String _hosterID) {
        Function function = new Function("getSellerShardByHosterID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hosterID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> uploadSellerShardFromBuyer(BigInteger _orderID, String _shard) {
        Function function = new Function(
                "uploadSellerShardFromBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_shard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getBuyer(BigInteger _orderID) {
        Function function = new Function("getBuyer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getBuyerDecryptedShard(BigInteger _orderID, String _hoster) {
        Function function = new Function("getBuyerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hoster)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> getBuyerShardByHosterID(BigInteger _orderID, String _hosterID) {
        Function function = new Function("getBuyerShardByHosterID", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_hosterID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> uploadSellerDecryptedShard(BigInteger _orderID, String _decryptedShard) {
        Function function = new Function(
                "uploadSellerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_decryptedShard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> createNewTradeOrder(BigInteger _orderID, String _seller, BigInteger _hosterNum) {
        Function function = new Function(
                "createNewTradeOrder", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Address(_seller), 
                new org.web3j.abi.datatypes.generated.Uint256(_hosterNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List<String>> getShardHosters(BigInteger _orderID) {
        Function function = new Function("getShardHosters", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List<String>.class);
    }

    public RemoteCall<String> feeManager() {
        Function function = new Function("feeManager", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> maxHosterNum() {
        Function function = new Function("maxHosterNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getSeller(BigInteger _orderID) {
        Function function = new Function("getSeller", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateMaxHosterNum(BigInteger _maxHosterNum) {
        Function function = new Function(
                "updateMaxHosterNum", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_maxHosterNum)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> uploadBuyerDecryptedShard(BigInteger _orderID, String _decryptedShard) {
        Function function = new Function(
                "uploadBuyerDecryptedShard", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_orderID), 
                new org.web3j.abi.datatypes.Utf8String(_decryptedShard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateHosterContract(String _hoster) {
        Function function = new Function(
                "updateHosterContract", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_hoster)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> hosterContract() {
        Function function = new Function("hosterContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _feeManager, String _vss) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManager), 
                new org.web3j.abi.datatypes.Address(_vss)));
        return deployRemoteCall(Trade.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Trade> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _feeManager, String _vss) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManager), 
                new org.web3j.abi.datatypes.Address(_vss)));
        return deployRemoteCall(Trade.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static Trade load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Trade load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Trade(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class CreateOrderEventResponse {
        public String buyer;

        public String seller;

        public BigInteger orderID;

        public List<String> hosters;
    }

    public static class UploadEncryptedShardEventResponse {
        public String who;

        public BigInteger orderID;

        public BigInteger userType;

        public String shards;
    }

    public static class RecoverPrivKeyEventResponse {
        public BigInteger orderID;

        public BigInteger userType;

        public String privKey;
    }

    public static class UploadDecryptedShardsEventResponse {
        public String hoster;

        public BigInteger orderID;

        public BigInteger userType;

        public String decryptedShard;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
