
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Hoster extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50604051602080613b2c83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100af57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060046040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101555050505061397e806101ae6000396000f3006080604052600436106100f1576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806315660075146100f65780631daf5d9b1461015b5780634102efb1146101dd578063415d58ac1461029557806360b10d3814610309578063665ae96f1461036e5780636d32fea7146103c9578063715018a61461042457806388b8dcde1461043b5780638da5cb5b146104805780639549981b146104d75780639857518814610532578063a4bb65fc1461058d578063a87430ba14610645578063e1653ae114610750578063f2fde38b14610805578063f7a2799a14610848575b600080fd5b34801561010257600080fd5b50610141600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061089f565b604051808215151515815260200191505060405180910390f35b34801561016757600080fd5b5061018660048036038101908080359060200190929190505050610d13565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101c95780820151818401526020810190506101ae565b505050509050019250505060405180910390f35b3480156101e957600080fd5b5061027b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff16906020019092919050505061101c565b604051808215151515815260200191505060405180910390f35b3480156102a157600080fd5b506102c06004803603810190808035906020019092919050505061136a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561031557600080fd5b50610354600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506113bd565b604051808215151515815260200191505060405180910390f35b34801561037a57600080fd5b506103af600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061162a565b604051808215151515815260200191505060405180910390f35b3480156103d557600080fd5b5061040a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116ff565b604051808215151515815260200191505060405180910390f35b34801561043057600080fd5b50610439611856565b005b34801561044757600080fd5b5061046660048036038101908080359060200190929190505050611958565b604051808215151515815260200191505060405180910390f35b34801561048c57600080fd5b50610495611d4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104e357600080fd5b50610518600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d74565b604051808215151515815260200191505060405180910390f35b34801561053e57600080fd5b50610573600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612248565b604051808215151515815260200191505060405180910390f35b34801561059957600080fd5b5061062b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050612386565b604051808215151515815260200191505060405180910390f35b34801561065157600080fd5b50610686600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612697565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001806020018360018111156106d257fe5b60ff168152602001828103825284818151815260200191508051906020019080838360005b838110156107125780820151818401526020810190506106f7565b50505050905090810190601f16801561073f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b34801561075c57600080fd5b506107eb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061278c565b604051808215151515815260200191505060405180910390f35b34801561081157600080fd5b50610846600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b2f565b005b34801561085457600080fd5b50610889600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c84565b6040518082815260200191505060405180910390f35b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561090057600080fd5b6109098661162a565b151561091457600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634cc88ed187876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b505050506040513d6020811015610a0357600080fd5b81019080805190602001909291905050501515610a1c57fe5b610a68600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015486612c9c565b809350819450829550505050821515610a8057600080fd5b600460408051908101604052808873ffffffffffffffffffffffffffffffffffffffff168152602001878152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050610b4c826001600480549050038360026132dc909392919063ffffffff16565b50600160048054905003600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610cc286600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb65780601f10610c8b57610100808354040283529160200191610cb6565b820191906000526020600020905b815481529060010190602001808311610c9957829003601f168201915b50505050506001612386565b508573ffffffffffffffffffffffffffffffffffffffff167ffd20370bb6caa5b25972791cbb00e60bb688b3a31e8574a2c9d84b95db345f7f60405160405180910390a26001935050505092915050565b606060008060606000606060008088111515610d2e57600080fd5b87604051908082528060200260200182016040528015610d5d5781602001602082028038833980820191505090505b509350610d7860006001600261335d9092919063ffffffff16565b8096508197505050851515610d8f57839650611011565b5b600085141515610e5f57600485815481101515610da957fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484815181101515610de957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082806001019350508783101515610e3b57610e5f565b610e52856001600261335d9092919063ffffffff16565b8096508197505050610d90565b87831015610f955782604051908082528060200260200182016040528015610e965781602001602082028038833980820191505090505b509150600090505b82811015610f15578381815181101515610eb457fe5b906020019060200201518282815181101515610ecc57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080600101915050610e9e565b7f016dca87f9eef9675923cf7ea72f36d3b017568fe9c4caf26108878ac94d256d826040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610f7a578082015181840152602081019050610f5f565b505050509050019250505060405180910390a1819650611011565b7f016dca87f9eef9675923cf7ea72f36d3b017568fe9c4caf26108878ac94d256d846040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ffa578082015181840152602081019050610fdf565b505050509050019250505060405180910390a18396505b505050505050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561107957600080fd5b816000600181111561108757fe5b81600181111561109357fe5b14806110b457506001808111156110a657fe5b8160018111156110b257fe5b145b15156110bf57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156110fb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561119857600080fd5b85600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906112b6929190613865565b5082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083600181111561131557fe5b02179055508573ffffffffffffffffffffffffffffffffffffffff167ffc0fbce0ce138a79db83eb10fdbb555b13ae1dd0e8f06c3e7aff42d1338a953960405160405180910390a26001915050949350505050565b60048181548110151561137957fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561141b57600080fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561146a57600080fd5b6004600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811015156114b857fe5b9060005260206000209060020201600101549050600115156114db8585846133b9565b15151415156114e957600080fd5b61161e8484600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b5050505050600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16612386565b50600191505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561166757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080600080600061175a600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460026135c590919063ffffffff16565b809450819550829650505050831515611776576000945061184d565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008114156117ca576000945061184d565b8573ffffffffffffffffffffffffffffffffffffffff166004828154811015156117f057fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611848576000945061184d565b600194505b50505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118b157600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806004600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811015156119a957fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a1457600080fd5b3390506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515611a6657600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f82ede3b33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611b2b57600080fd5b505af1158015611b3f573d6000803e3d6000fd5b505050506040513d6020811015611b5557600080fd5b81019080805190602001909291905050501515611b6e57fe5b60011515611bbf82600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154866133b9565b1515141515611bcd57600080fd5b611d4481600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611cea5780601f10611cbf57610100808354040283529160200191611cea565b820191906000526020600020905b815481529060010190602001808311611ccd57829003601f168201915b5050505050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16612386565b506001915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dd157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611e0d57600080fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515611e5c57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d51780ec836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015611f1957600080fd5b505af1158015611f2d573d6000803e3d6000fd5b505050506040513d6020811015611f4357600080fd5b81019080805190602001909291905050501515611f5c57fe5b611faf600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600261365790919063ffffffff16565b506040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152506004600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110151561202b57fe5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506121fb82600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121ef5780601f106121c4576101008083540402835291602001916121ef565b820191906000526020600020905b8154815290600101906020018083116121d257829003601f168201915b50505050506000612386565b508173ffffffffffffffffffffffffffffffffffffffff167f1b627a79aed3d0f3943be9aad626d0f7ee2ddb40c3afa36c0c55aad055ed8a2260405160405180910390a260019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122a557600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600061232491906138e5565b6003820160006101000a81549060ff021916905550508173ffffffffffffffffffffffffffffffffffffffff167fd9130ada26096344100635679bad0874686abf52ecb1d4a8b6eb7e116e69472e60405160405180910390a260019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123e357600080fd5b81600060018111156123f157fe5b8160018111156123fd57fe5b148061241e575060018081111561241057fe5b81600181111561241c57fe5b145b151561242957600080fd5b8573ffffffffffffffffffffffffffffffffffffffff16600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156124c557600080fd5b85600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906125e3929190613865565b5082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083600181111561264257fe5b02179055508573ffffffffffffffffffffffffffffffffffffffff167f6fe90e519e1fd89b6dfb1f6eb0593deecf53f111f69d70848a13cafa7c37ee5860405160405180910390a26001915050949350505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561276f5780601f106127445761010080835404028352916020019161276f565b820191906000526020600020905b81548152906001019060200180831161275257829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127ed57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415151561282957600080fd5b6000600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561287757600080fd5b6128808861162a565b15151561288c57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634cc88ed189886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561295157600080fd5b505af1158015612965573d6000803e3d6000fd5b505050506040513d602081101561297b57600080fd5b8101908080519060200190929190505050151561299457fe5b61299e8787612c9c565b8093508194508295505050508215156129b657600080fd5b600460408051908101604052808a73ffffffffffffffffffffffffffffffffffffffff168152602001888152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050612a82826001600480549050038360026132dc909392919063ffffffff16565b50600160048054905003600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612adc888887600161101c565b508773ffffffffffffffffffffffffffffffffffffffff167fe3d4f633a486751e5e3e4990dc7f79b728e0d79b3db91f4c3c0d00be208b380e60405160405180910390a260019350505050949350505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b8a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bc657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60056020528060005260406000206000915090505481565b600080600080600080612cbd60006001600261335d9092919063ffffffff16565b8093508194505050821580612cd25750600082145b15612ce8576001600060019550955095506132d2565b8760016000600485815481101515612cfc57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015612d83576001600060019550955095506132d2565b8760016000600485815481101515612d9757fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154148015612e33575086600483815481101515612e1f57fe5b906000526020600020906002020160010154105b15612e49576001600060019550955095506132d2565b8190505b6000821415156132c357612e6e826001600261335d9092919063ffffffff16565b8093508194505050821515612e8d5760018160019550955095506132d2565b8760016000600484815481101515612ea157fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541115613078578760016000600485815481101515612f2b57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015612fb15760018160019550955095506132d2565b8760016000600485815481101515612fc557fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414801561306257508660048381548110151561304d57fe5b90600052602060002090600202016001015411155b156130775760018160019550955095506132d2565b5b876001600060048481548110151561308c57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414156132bb57876001600060048581548110151561311657fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541080156131b357508660048281548110151561319e57fe5b90600052602060002090600202016001015410155b156131c85760018160019550955095506132d2565b87600160006004858154811015156131dc57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414801561327957508660048281548110151561326457fe5b90600052602060002090600202016001015410155b80156132a557508660048381548110151561329057fe5b90600052602060002090600202016001015411155b156132ba5760018160019550955095506132d2565b5b819050612e4d565b60008060008191509550955095505b5050509250925092565b6000806132e98685613745565b1580156132fc57506132fb8686613745565b5b1561334f5785600001600086815260200190815260200160002060008415151515815260200190815260200160002054905061333a86868686613800565b61334686858386613800565b60019150613354565b600091505b50949350505050565b60008061336a8585613745565b151561337f57600080809050915091506133b1565b600185600001600086815260200190815260200160002060008515151515815260200190815260200160002054915091505b935093915050565b6000806000806000600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415151561340e57600080fd5b613461600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600261365790919063ffffffff16565b5061346c8686612c9c565b80935081945082955050505082151561348457600080fd5b60408051908101604052808873ffffffffffffffffffffffffffffffffffffffff168152602001868152506004600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811015156134fd57fe5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506135b682600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548360026132dc909392919063ffffffff16565b50600193505050509392505050565b60008060006135d48585613745565b15156135f0576000806000819150809050925092509250613650565b60018560000160008681526020019081526020016000206000801515151581526020019081526020016000205486600001600087815260200190815260200160002060006001151515158152602001908152602001600020549250925092505b9250925092565b60008082148061366e575061366c8383613745565b155b1561367c576000905061373f565b6136de838460000160008581526020019081526020016000206000801515151581526020019081526020016000205485600001600086815260200190815260200160002060006001151515158152602001908152602001600020546001613800565b8260000160008381526020019081526020016000206000801515151581526020019081526020016000206000905582600001600083815260200190815260200160002060006001151515158152602001908152602001600020600090558190505b92915050565b600080836000016000848152602001908152602001600020600080151515158152602001908152602001600020541480156137ab575060008360000160008481526020019081526020016000206000600115151515815260200190815260200160002054145b156137f55781836000016000808152602001908152602001600020600060011515151581526020019081526020016000205414156137ec57600190506137fa565b600090506137fa565b600190505b92915050565b828460000160008481526020019081526020016000206000831515151515815260200190815260200160002081905550818460000160008581526020019081526020016000206000831515151581526020019081526020016000208190555050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106138a657805160ff19168380011785556138d4565b828001600101855582156138d4579182015b828111156138d35782518255916020019190600101906138b8565b5b5090506138e1919061392d565b5090565b50805460018160011615610100020316600290046000825580601f1061390b575061392a565b601f016020900490600052602060002090810190613929919061392d565b5b50565b61394f91905b8082111561394b576000816000905550600101613933565b5090565b905600a165627a7a723058205274536f69c235b106f1aa83fade7599ecf254b5ec6ddd6723b1be12304afa190029";

    private Hoster(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Hoster(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AddThemisHosterEventResponse> getAddThemisHosterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddThemisHosterEventResponse> responses = new ArrayList<AddThemisHosterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddThemisHosterEventResponse typedResponse = new AddThemisHosterEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddThemisHosterEventResponse> addThemisHosterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddThemisHosterEventResponse>() {
            @Override
            public AddThemisHosterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddThemisHosterEventResponse typedResponse = new AddThemisHosterEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveThemisHosterEventResponse> getRemoveThemisHosterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveThemisHosterEventResponse> responses = new ArrayList<RemoveThemisHosterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveThemisHosterEventResponse typedResponse = new RemoveThemisHosterEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveThemisHosterEventResponse> removeThemisHosterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveThemisHosterEventResponse>() {
            @Override
            public RemoveThemisHosterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveThemisHosterEventResponse typedResponse = new RemoveThemisHosterEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChangeToThemisHosterEventResponse> getChangeToThemisHosterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChangeToThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ChangeToThemisHosterEventResponse> responses = new ArrayList<ChangeToThemisHosterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ChangeToThemisHosterEventResponse typedResponse = new ChangeToThemisHosterEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChangeToThemisHosterEventResponse> changeToThemisHosterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChangeToThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChangeToThemisHosterEventResponse>() {
            @Override
            public ChangeToThemisHosterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ChangeToThemisHosterEventResponse typedResponse = new ChangeToThemisHosterEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetThemisHostersEventResponse> getGetThemisHostersEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetThemisHosters",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GetThemisHostersEventResponse> responses = new ArrayList<GetThemisHostersEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GetThemisHostersEventResponse typedResponse = new GetThemisHostersEventResponse();
            typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetThemisHostersEventResponse> getThemisHostersEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetThemisHosters",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetThemisHostersEventResponse>() {
            @Override
            public GetThemisHostersEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GetThemisHostersEventResponse typedResponse = new GetThemisHostersEventResponse();
                typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddThemisUserEventResponse> getAddThemisUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddThemisUserEventResponse> responses = new ArrayList<AddThemisUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddThemisUserEventResponse typedResponse = new AddThemisUserEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddThemisUserEventResponse> addThemisUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddThemisUserEventResponse>() {
            @Override
            public AddThemisUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddThemisUserEventResponse typedResponse = new AddThemisUserEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UpdateThemisUserEventResponse> getUpdateThemisUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateThemisUserEventResponse> responses = new ArrayList<UpdateThemisUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateThemisUserEventResponse typedResponse = new UpdateThemisUserEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateThemisUserEventResponse> updateThemisUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateThemisUserEventResponse>() {
            @Override
            public UpdateThemisUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateThemisUserEventResponse typedResponse = new UpdateThemisUserEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveThemisUserEventResponse> getRemoveThemisUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveThemisUserEventResponse> responses = new ArrayList<RemoveThemisUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveThemisUserEventResponse typedResponse = new RemoveThemisUserEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveThemisUserEventResponse> removeThemisUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveThemisUserEventResponse>() {
            @Override
            public RemoveThemisUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveThemisUserEventResponse typedResponse = new RemoveThemisUserEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> updateNormalUserToHoster(String _id, BigInteger _deposit) {
        Function function = new Function(
                "updateNormalUserToHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_deposit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getHosters(BigInteger _num) {
        Function function = new Function(
                "getHosters", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addUser(String _id, BigInteger _fame, String _publicKey, BigInteger _userType) {
        Function function = new Function(
                "addUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_fame), 
                new org.web3j.abi.datatypes.Utf8String(_publicKey), 
                new org.web3j.abi.datatypes.generated.Uint8(_userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> hoster(BigInteger param0) {
        final Function function = new Function("hoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> updateUserFame(String _id, BigInteger _newFame) {
        Function function = new Function(
                "updateUserFame", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_newFame)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isThemisUser(String _user) {
        Function function = new Function("isThemisUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isHoster(String _who) {
        Function function = new Function("isHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateUserDeposit(BigInteger _newDeposit) {
        Function function = new Function(
                "updateUserDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newDeposit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeHoster(String _id) {
        Function function = new Function(
                "removeHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUser(String _id) {
        Function function = new Function(
                "removeUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateUser(String _id, BigInteger _newFame, String _newPublicKey, BigInteger _userType) {
        Function function = new Function(
                "updateUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_newFame), 
                new org.web3j.abi.datatypes.Utf8String(_newPublicKey), 
                new org.web3j.abi.datatypes.generated.Uint8(_userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> users(String param0) {
        final Function function = new Function("users", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addHoster(String _id, BigInteger _fame, BigInteger _deposit, String _publicKey) {
        Function function = new Function(
                "addHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_fame), 
                new org.web3j.abi.datatypes.generated.Uint256(_deposit), 
                new org.web3j.abi.datatypes.Utf8String(_publicKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> idIndex(String param0) {
        Function function = new Function("idIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Hoster> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _feeManagerAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManagerAddress)));
        return deployRemoteCall(Hoster.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Hoster> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _feeManagerAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManagerAddress)));
        return deployRemoteCall(Hoster.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static Hoster load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hoster(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Hoster load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hoster(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddThemisHosterEventResponse {
        public String id;
    }

    public static class RemoveThemisHosterEventResponse {
        public String id;
    }

    public static class ChangeToThemisHosterEventResponse {
        public String id;
    }

    public static class GetThemisHostersEventResponse {
        public List<String> hosters;
    }

    public static class AddThemisUserEventResponse {
        public String id;
    }

    public static class UpdateThemisUserEventResponse {
        public String id;
    }

    public static class RemoveThemisUserEventResponse {
        public String id;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
