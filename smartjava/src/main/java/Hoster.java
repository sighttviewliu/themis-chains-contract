
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.1.1.
 */
public final class Hoster extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50604051602080613c0b83398101806040528101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156100af57600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060046040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550505050613a5d806101ae6000396000f300608060405260043610610107576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806305b050de1461010c5780630b2414d61461012e5780630c36d763146101665780631daf5d9b146101cb5780633ad80f001461024d5780634102efb1146102eb578063415d58ac146103a3578063665ae96f146104175780636d32fea714610472578063715018a6146104cd5780638da5cb5b146104e45780639549981b1461053b5780639857518814610596578063a4bb65fc146105f1578063a87430ba146106a9578063d0fb0203146107b4578063ecbbb65f1461080b578063f2fde38b14610859578063f7a2799a1461089c575b600080fd5b6101146108f3565b604051808215151515815260200191505060405180910390f35b61014c60048036038101908080359060200190929190505050610af5565b604051808215151515815260200191505060405180910390f35b34801561017257600080fd5b506101b1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d00565b604051808215151515815260200191505060405180910390f35b3480156101d757600080fd5b506101f660048036038101908080359060200190929190505050610f6d565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561023957808201518184015260208101905061021e565b505050509050019250505060405180910390f35b6102d1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611276565b604051808215151515815260200191505060405180910390f35b3480156102f757600080fd5b50610389600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190505050611626565b604051808215151515815260200191505060405180910390f35b3480156103af57600080fd5b506103ce60048036038101908080359060200190929190505050611974565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561042357600080fd5b50610458600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506119c7565b604051808215151515815260200191505060405180910390f35b34801561047e57600080fd5b506104b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a9c565b604051808215151515815260200191505060405180910390f35b3480156104d957600080fd5b506104e2611bf3565b005b3480156104f057600080fd5b506104f9611cf5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054757600080fd5b5061057c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d1a565b604051808215151515815260200191505060405180910390f35b3480156105a257600080fd5b506105d7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506121ee565b604051808215151515815260200191505060405180910390f35b3480156105fd57600080fd5b5061068f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff16906020019092919050505061232c565b604051808215151515815260200191505060405180910390f35b3480156106b557600080fd5b506106ea600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061263d565b604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018060200183600181111561073657fe5b60ff168152602001828103825284818151815260200191508051906020019080838360005b8381101561077657808201518184015260208101905061075b565b50505050905090810190601f1680156107a35780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156107c057600080fd5b506107c9612732565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61083f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612758565b604051808215151515815260200191505060405180910390f35b34801561086557600080fd5b5061089a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612bd9565b005b3480156108a857600080fd5b506108dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612d2e565b6040518082815260200191505060405180910390f35b6000806108ff33611a9c565b151561090a57600080fd5b60003411151561091957600080fd5b339050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632287b18034836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50505050506040513d6020811015610a0457600080fd5b81019080805190602001909291905050501515610a1d57fe5b60011515610adf82600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610ada346004600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481101515610aba57fe5b906000526020600020906002020160010154612d4690919063ffffffff16565b612d62565b1515141515610aed57600080fd5b600191505090565b600080610b0133611a9c565b1515610b0c57600080fd5b600083111515610b1b57600080fd5b33905060011515610be082600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610bdb876004600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481101515610bbb57fe5b906000526020600020906002020160010154612f6e90919063ffffffff16565b612d62565b1515141515610bee57600080fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3fb1a6e33856040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610cb357600080fd5b505af1158015610cc7573d6000803e3d6000fd5b505050506040513d6020811015610cdd57600080fd5b81019080805190602001909291905050501515610cf657fe5b6001915050919050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d5e57600080fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515610dad57600080fd5b6004600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481101515610dfb57fe5b906000526020600020906002020160010154905060011515610e1e858584612d62565b1515141515610e2c57600080fd5b610f618484600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f075780601f10610edc57610100808354040283529160200191610f07565b820191906000526020600020905b815481529060010190602001808311610eea57829003601f168201915b5050505050600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661232c565b50600191505092915050565b606060008060606000606060008088111515610f8857600080fd5b87604051908082528060200260200182016040528015610fb75781602001602082028038833980820191505090505b509350610fd2600060016002612f879092919063ffffffff16565b8096508197505050851515610fe95783965061126b565b5b6000851415156110b95760048581548110151561100357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16848481518110151561104357fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082806001019350508783101515611095576110b9565b6110ac8560016002612f879092919063ffffffff16565b8096508197505050610fea565b878310156111ef57826040519080825280602002602001820160405280156110f05781602001602082028038833980820191505090505b509150600090505b8281101561116f57838181518110151561110e57fe5b90602001906020020151828281518110151561112657fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080806001019150506110f8565b7f016dca87f9eef9675923cf7ea72f36d3b017568fe9c4caf26108878ac94d256d826040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156111d45780820151818401526020810190506111b9565b505050509050019250505060405180910390a181965061126b565b7f016dca87f9eef9675923cf7ea72f36d3b017568fe9c4caf26108878ac94d256d846040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015611254578082015181840152602081019050611239565b505050509050019250505060405180910390a18396505b505050505050919050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156112d957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415151561131557600080fd5b6000600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151561136357600080fd5b61136c886119c7565b15151561137857600080fd5b60003411151561138757600080fd5b349350600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359f3ef05858a6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b15801561144757600080fd5b505af115801561145b573d6000803e3d6000fd5b50505050506040513d602081101561147257600080fd5b8101908080519060200190929190505050151561148b57fe5b6114958785612fe3565b8093508194508295505050508215156114ad57600080fd5b600460408051908101604052808a73ffffffffffffffffffffffffffffffffffffffff168152602001868152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550505061157982600160048054905003836002613623909392919063ffffffff16565b50600160048054905003600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d38888886001611626565b508773ffffffffffffffffffffffffffffffffffffffff167fe3d4f633a486751e5e3e4990dc7f79b728e0d79b3db91f4c3c0d00be208b380e60405160405180910390a260019450505050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561168357600080fd5b816000600181111561169157fe5b81600181111561169d57fe5b14806116be57506001808111156116b057fe5b8160018111156116bc57fe5b145b15156116c957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561170557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156117a257600080fd5b85600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020190805190602001906118c0929190613944565b5082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff0219169083600181111561191f57fe5b02179055508573ffffffffffffffffffffffffffffffffffffffff167ffc0fbce0ce138a79db83eb10fdbb555b13ae1dd0e8f06c3e7aff42d1338a953960405160405180910390a26001915050949350505050565b60048181548110151561198357fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a0457600080fd5b8173ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806000806000611af7600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460026136a490919063ffffffff16565b809450819550829650505050831515611b135760009450611bea565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415611b675760009450611bea565b8573ffffffffffffffffffffffffffffffffffffffff16600482815481101515611b8d57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611be55760009450611bea565b600194505b50505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c4e57600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d7757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611db357600080fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515611e0257600080fd5b611e55600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600261373690919063ffffffff16565b506040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152506004600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481101515611ed157fe5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101559050506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506120a182600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120955780601f1061206a57610100808354040283529160200191612095565b820191906000526020600020905b81548152906001019060200180831161207857829003601f168201915b5050505050600061232c565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351e41700836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b15801561215f57600080fd5b505af1158015612173573d6000803e3d6000fd5b505050506040513d602081101561218957600080fd5b810190808051906020019092919050505015156121a257fe5b8173ffffffffffffffffffffffffffffffffffffffff167f1b627a79aed3d0f3943be9aad626d0f7ee2ddb40c3afa36c0c55aad055ed8a2260405160405180910390a260019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561224b57600080fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160006122ca91906139c4565b6003820160006101000a81549060ff021916905550508173ffffffffffffffffffffffffffffffffffffffff167fd9130ada26096344100635679bad0874686abf52ecb1d4a8b6eb7e116e69472e60405160405180910390a260019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561238957600080fd5b816000600181111561239757fe5b8160018111156123a357fe5b14806123c457506001808111156123b657fe5b8160018111156123c257fe5b145b15156123cf57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff16600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561246b57600080fd5b85600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555083600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019080519060200190612589929190613944565b5082600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006101000a81548160ff021916908360018111156125e857fe5b02179055508573ffffffffffffffffffffffffffffffffffffffff167f6fe90e519e1fd89b6dfb1f6eb0593deecf53f111f69d70848a13cafa7c37ee5860405160405180910390a26001915050949350505050565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127155780601f106126ea57610100808354040283529160200191612715565b820191906000526020600020905b8154815290600101906020018083116126f857829003601f168201915b5050505050908060030160009054906101000a900460ff16905084565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127bb57600080fd5b6127c4866119c7565b15156127cf57600080fd5b6000341115156127de57600080fd5b349350600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359f3ef0585886040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019150506020604051808303818588803b15801561289e57600080fd5b505af11580156128b2573d6000803e3d6000fd5b50505050506040513d60208110156128c957600080fd5b810190808051906020019092919050505015156128e257fe5b61292e600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015485612fe3565b80935081945082955050505082151561294657600080fd5b600460408051908101604052808873ffffffffffffffffffffffffffffffffffffffff168152602001868152509080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155505050612a1282600160048054905003836002613623909392919063ffffffff16565b50600160048054905003600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612b8886600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b7c5780601f10612b5157610100808354040283529160200191612b7c565b820191906000526020600020905b815481529060010190602001808311612b5f57829003601f168201915b5050505050600161232c565b508573ffffffffffffffffffffffffffffffffffffffff167ffd20370bb6caa5b25972791cbb00e60bb688b3a31e8574a2c9d84b95db345f7f60405160405180910390a26001945050505050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612c3457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c7057600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60056020528060005260406000206000915090505481565b60008183019050828110151515612d5957fe5b80905092915050565b6000806000806000600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414151515612db757600080fd5b612e0a600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600261373690919063ffffffff16565b50612e158686612fe3565b809350819450829550505050821515612e2d57600080fd5b60408051908101604052808873ffffffffffffffffffffffffffffffffffffffff168152602001868152506004600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481101515612ea657fe5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050612f5f82600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054836002613623909392919063ffffffff16565b50600193505050509392505050565b6000828211151515612f7c57fe5b818303905092915050565b600080612f948585613824565b1515612fa95760008080905091509150612fdb565b600185600001600086815260200190815260200160002060008515151515815260200190815260200160002054915091505b935093915050565b600080600080600080613004600060016002612f879092919063ffffffff16565b80935081945050508215806130195750600082145b1561302f57600160006001955095509550613619565b876001600060048581548110151561304357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156130ca57600160006001955095509550613619565b87600160006004858154811015156130de57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015414801561317a57508660048381548110151561316657fe5b906000526020600020906002020160010154105b1561319057600160006001955095509550613619565b8190505b60008214151561360a576131b58260016002612f879092919063ffffffff16565b80935081945050508215156131d4576001816001955095509550613619565b87600160006004848154811015156131e857fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015411156133bf57876001600060048581548110151561327257fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156132f8576001816001955095509550613619565b876001600060048581548110151561330c57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541480156133a957508660048381548110151561339457fe5b90600052602060002090600202016001015411155b156133be576001816001955095509550613619565b5b87600160006004848154811015156133d357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154141561360257876001600060048581548110151561345d57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541080156134fa5750866004828154811015156134e557fe5b90600052602060002090600202016001015410155b1561350f576001816001955095509550613619565b876001600060048581548110151561352357fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541480156135c05750866004828154811015156135ab57fe5b90600052602060002090600202016001015410155b80156135ec5750866004838154811015156135d757fe5b90600052602060002090600202016001015411155b15613601576001816001955095509550613619565b5b819050613194565b60008060008191509550955095505b5050509250925092565b6000806136308685613824565b15801561364357506136428686613824565b5b1561369657856000016000868152602001908152602001600020600084151515158152602001908152602001600020549050613681868686866138df565b61368d868583866138df565b6001915061369b565b600091505b50949350505050565b60008060006136b38585613824565b15156136cf57600080600081915080905092509250925061372f565b60018560000160008681526020019081526020016000206000801515151581526020019081526020016000205486600001600087815260200190815260200160002060006001151515158152602001908152602001600020549250925092505b9250925092565b60008082148061374d575061374b8383613824565b155b1561375b576000905061381e565b6137bd8384600001600085815260200190815260200160002060008015151515815260200190815260200160002054856000016000868152602001908152602001600020600060011515151581526020019081526020016000205460016138df565b8260000160008381526020019081526020016000206000801515151581526020019081526020016000206000905582600001600083815260200190815260200160002060006001151515158152602001908152602001600020600090558190505b92915050565b6000808360000160008481526020019081526020016000206000801515151581526020019081526020016000205414801561388a575060008360000160008481526020019081526020016000206000600115151515815260200190815260200160002054145b156138d45781836000016000808152602001908152602001600020600060011515151581526020019081526020016000205414156138cb57600190506138d9565b600090506138d9565b600190505b92915050565b828460000160008481526020019081526020016000206000831515151515815260200190815260200160002081905550818460000160008581526020019081526020016000206000831515151581526020019081526020016000208190555050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061398557805160ff19168380011785556139b3565b828001600101855582156139b3579182015b828111156139b2578251825591602001919060010190613997565b5b5090506139c09190613a0c565b5090565b50805460018160011615610100020316600290046000825580601f106139ea5750613a09565b601f016020900490600052602060002090810190613a089190613a0c565b5b50565b613a2e91905b80821115613a2a576000816000905550600101613a12565b5090565b905600a165627a7a7230582016cb93164b285a76af38259129a9eb9433dbf9e3dad17d588ddd912d164e8edc0029";

    private Hoster(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private Hoster(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AddThemisHosterEventResponse> getAddThemisHosterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddThemisHosterEventResponse> responses = new ArrayList<AddThemisHosterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddThemisHosterEventResponse typedResponse = new AddThemisHosterEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddThemisHosterEventResponse> addThemisHosterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddThemisHosterEventResponse>() {
            @Override
            public AddThemisHosterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddThemisHosterEventResponse typedResponse = new AddThemisHosterEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveThemisHosterEventResponse> getRemoveThemisHosterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveThemisHosterEventResponse> responses = new ArrayList<RemoveThemisHosterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveThemisHosterEventResponse typedResponse = new RemoveThemisHosterEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveThemisHosterEventResponse> removeThemisHosterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveThemisHosterEventResponse>() {
            @Override
            public RemoveThemisHosterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveThemisHosterEventResponse typedResponse = new RemoveThemisHosterEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChangeToThemisHosterEventResponse> getChangeToThemisHosterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChangeToThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ChangeToThemisHosterEventResponse> responses = new ArrayList<ChangeToThemisHosterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ChangeToThemisHosterEventResponse typedResponse = new ChangeToThemisHosterEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChangeToThemisHosterEventResponse> changeToThemisHosterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChangeToThemisHoster", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChangeToThemisHosterEventResponse>() {
            @Override
            public ChangeToThemisHosterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ChangeToThemisHosterEventResponse typedResponse = new ChangeToThemisHosterEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetThemisHostersEventResponse> getGetThemisHostersEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetThemisHosters",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GetThemisHostersEventResponse> responses = new ArrayList<GetThemisHostersEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GetThemisHostersEventResponse typedResponse = new GetThemisHostersEventResponse();
            typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetThemisHostersEventResponse> getThemisHostersEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetThemisHosters",
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetThemisHostersEventResponse>() {
            @Override
            public GetThemisHostersEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GetThemisHostersEventResponse typedResponse = new GetThemisHostersEventResponse();
                typedResponse.hosters = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddThemisUserEventResponse> getAddThemisUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AddThemisUserEventResponse> responses = new ArrayList<AddThemisUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AddThemisUserEventResponse typedResponse = new AddThemisUserEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddThemisUserEventResponse> addThemisUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddThemisUserEventResponse>() {
            @Override
            public AddThemisUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AddThemisUserEventResponse typedResponse = new AddThemisUserEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UpdateThemisUserEventResponse> getUpdateThemisUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UpdateThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<UpdateThemisUserEventResponse> responses = new ArrayList<UpdateThemisUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            UpdateThemisUserEventResponse typedResponse = new UpdateThemisUserEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UpdateThemisUserEventResponse> updateThemisUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UpdateThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UpdateThemisUserEventResponse>() {
            @Override
            public UpdateThemisUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                UpdateThemisUserEventResponse typedResponse = new UpdateThemisUserEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RemoveThemisUserEventResponse> getRemoveThemisUserEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RemoveThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RemoveThemisUserEventResponse> responses = new ArrayList<RemoveThemisUserEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RemoveThemisUserEventResponse typedResponse = new RemoveThemisUserEventResponse();
            typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RemoveThemisUserEventResponse> removeThemisUserEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RemoveThemisUser", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RemoveThemisUserEventResponse>() {
            @Override
            public RemoveThemisUserEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RemoveThemisUserEventResponse typedResponse = new RemoveThemisUserEventResponse();
                typedResponse.id = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipRenouncedEventResponse> ownershipRenouncedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipRenounced", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OwnershipTransferred", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> increaseDeposit(BigInteger weiValue) {
        Function function = new Function(
                "increaseDeposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> decreaseDeposit(BigInteger amount, BigInteger weiValue) {
        Function function = new Function(
                "decreaseDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> updateHosterFame(String _id, BigInteger _newFame) {
        Function function = new Function(
                "updateHosterFame", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_newFame)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getHosters(BigInteger _num) {
        Function function = new Function(
                "getHosters", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_num)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addHoster(String _id, BigInteger _fame, String _publicKey, BigInteger weiValue) {
        Function function = new Function(
                "addHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_fame), 
                new org.web3j.abi.datatypes.Utf8String(_publicKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> addUser(String _id, BigInteger _fame, String _publicKey, BigInteger _userType) {
        Function function = new Function(
                "addUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_fame), 
                new org.web3j.abi.datatypes.Utf8String(_publicKey), 
                new org.web3j.abi.datatypes.generated.Uint8(_userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, BigInteger>> hoster(BigInteger param0) {
        final Function function = new Function("hoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<String, BigInteger>>(
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> isThemisUser(String _user) {
        Function function = new Function("isThemisUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> isHoster(String _who) {
        Function function = new Function("isHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_who)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        Function function = new Function(
                "renounceOwnership", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> removeHoster(String _id) {
        Function function = new Function(
                "removeHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeUser(String _id) {
        Function function = new Function(
                "removeUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> updateUser(String _id, BigInteger _newFame, String _newPublicKey, BigInteger _userType) {
        Function function = new Function(
                "updateUser", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_newFame), 
                new org.web3j.abi.datatypes.Utf8String(_newPublicKey), 
                new org.web3j.abi.datatypes.generated.Uint8(_userType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, BigInteger, String, BigInteger>> users(String param0) {
        final Function function = new Function("users", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple4<String, BigInteger, String, BigInteger>>(
                new Callable<Tuple4<String, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple4<String, BigInteger, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<String> feeManager() {
        Function function = new Function("feeManager", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> updateNormalUserToHoster(String _id, BigInteger weiValue) {
        Function function = new Function(
                "updateNormalUserToHoster", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> idIndex(String param0) {
        Function function = new Function("idIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<Hoster> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _feeManagerAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManagerAddress)));
        return deployRemoteCall(Hoster.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<Hoster> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _feeManagerAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_feeManagerAddress)));
        return deployRemoteCall(Hoster.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static Hoster load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hoster(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Hoster load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Hoster(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddThemisHosterEventResponse {
        public String id;
    }

    public static class RemoveThemisHosterEventResponse {
        public String id;
    }

    public static class ChangeToThemisHosterEventResponse {
        public String id;
    }

    public static class GetThemisHostersEventResponse {
        public List<String> hosters;
    }

    public static class AddThemisUserEventResponse {
        public String id;
    }

    public static class UpdateThemisUserEventResponse {
        public String id;
    }

    public static class RemoveThemisUserEventResponse {
        public String id;
    }

    public static class OwnershipRenouncedEventResponse {
        public String previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
